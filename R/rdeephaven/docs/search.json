[{"path":"https://deephaven.io/core/rdoc/articles/agg_by.html","id":"applying-aggregations-to-a-table","dir":"Articles","previous_headings":"","what":"Applying aggregations to a table","title":"Aggregations with agg_by","text":"two methods performing aggregations table, agg_by() agg_all_by(). agg_by() allows perform many aggregations specified columns, agg_all_by() allows perform single aggregation every non-grouping column table. methods optional parameter used specify grouping columns. details method: TableHandle$agg_by(aggs, ): Creates new table containing grouping columns grouped data. resulting grouped data defined aggregation(s) specified. TableHandle$agg_all_by(agg, ): Creates new table containing grouping columns grouped data. resulting grouped data defined aggregation specified. method applies aggregation non-grouping columns table, can accept one aggregation time. agg_by() agg_all_by() methods know anything columns want perform aggregations. Rather, desired columns passed individual agg functions, enabling apply various kinds aggregations different columns groups columns needed.","code":""},{"path":"https://deephaven.io/core/rdoc/articles/agg_by.html","id":"agg-functions","dir":"Articles","previous_headings":"","what":"agg functions","title":"Aggregations with agg_by","text":"agg functions used perform aggregation calculations grouped data passing agg_by() agg_all_by(). functions generators, meaning return functions Deephaven engine knows interpret. call functions return AggOps. See ?AggOp information. AggOps R-level functions, Deephaven-specific data types perform intensive calculations. list agg functions available Deephaven: agg_first() agg_last() agg_min() agg_max() agg_sum() agg_abs_sum() agg_avg() agg_w_avg() agg_median() agg_var() agg_std() agg_percentile() agg_count() details aggregation function, see reference documentation running ?agg_first, ?agg_last, etc.","code":""},{"path":"https://deephaven.io/core/rdoc/articles/agg_by.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An Example","title":"Aggregations with agg_by","text":"","code":"library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # get first and last elements of each column th1 <- th$   agg_by(   agg_first(c(\"XFirst = X\", \"YFirst = Y\", \"Number1First = Number1\", \"Number2First = Number2\")),   agg_last(c(\"XLast = X\", \"YLast = Y\", \"Number1Last = Number1\", \"Number2Last = Number2\")) )  # compute mean and standard deviation of Number1 and Number2, grouped by X th2 <- th$   agg_by(   c(     agg_avg(c(\"Number1Avg = Number1\", \"Number2Avg = Number2\")),     agg_std(c(\"Number1Std = Number1\", \"Number2Std = Number2\"))   ),   by = \"X\" )  # compute maximum of all non-grouping columns, grouped by X and Y th3 <- th$   agg_all_by(agg_max(), by = c(\"X\", \"Y\"))  # compute minimum and maximum of Number1 and Number2 respectively grouped by Y th4 <- th$   agg_by(   c(     agg_min(\"Number1Min = Number1\"),     agg_max(\"Number2Max = Number2\")   ),   by = \"Y\" )  client$close()"},{"path":"https://deephaven.io/core/rdoc/articles/rdeephaven.html","id":"building-blocks-of-the-deephaven-r-client","dir":"Articles","previous_headings":"","what":"Building blocks of the Deephaven R Client","title":"Overview of the Deephaven Core R Client","text":"two primary R classes make Deephaven R Client, Client class TableHandle class. See ?Client ?TableHandle information. Client class used establish connection Deephaven server constructor Client$new(), send server requests, running script via run_script(), pushing local data server via import_table(). Basic usage Client class may look something like : Many server requests end creating modifying tables live server. keep track tables, R client retrieves references , wraps references TableHandle objects. TableHandles host methods mirror server-side table operations, head(), tail(), update_by(), . , can typically use TableHandles tables , corresponding methods call executed server. simple example pushing data server, retrieving TableHandle resulting table, applying basic table operations table: TableHandles also support common functional methods converting server-side Deephaven tables R objects stored local memory .data.frame(), as_tibble(), as_arrow_table(). ’s example converting table created R data frame verifying functional methods work expected: information classes methods, see reference documentation running ?Client ?TableHandle.","code":"library(rdeephaven) client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\") df1 <- data.frame(x = 1:10, y = 11:20) th1 <- client$import_table(df1)  th2 <- th1$   update(\"z = x + y\")$   where(\"z % 4 == 0\") df2 <- as.data.frame(th2)  print(nrow(th2) == nrow(df2)) print(ncol(th2) == ncol(df2)) print(dim(th2) == dim(df2)) print(all(as.data.frame(head(th2, 2)) == head(df2, 2))) print(all(as.data.frame(tail(th2, 2)) == tail(df2, 2)))"},{"path":"https://deephaven.io/core/rdoc/articles/rdeephaven.html","id":"real-time-data-analysis","dir":"Articles","previous_headings":"","what":"Real-time data analysis","title":"Overview of the Deephaven Core R Client","text":"Since TableHandles references tables living Deephaven server, may refer streaming tables, tables receiving new data periodically(typically per second). ’s simple example creating table adds new row every second: R objects like data frames Dplyr tibbles streaming property - always static objects stored memory. However, TableHandle referring streaming table may converted data frame tibble time, resulting object snapshot table time conversion. means can use Deephaven R Client perform real-time data analysis streaming data! , make simple plot ticking table, call three times demonstrate dynamic nature table: performance memory considerations pulling data server, best use provided TableHandle methods perform much analysis possible server, pull data something must done R, like plotting writing local file.","code":"th3 <- client$time_table(\"PT1s\")$   update(c(\"X = ii\", \"Y = sin(X)\")) plot(as.data.frame(th3)$X, as.data.frame(th3)$Y, type = \"l\") Sys.sleep(5) plot(as.data.frame(th3)$X, as.data.frame(th3)$Y, type = \"l\") Sys.sleep(5) plot(as.data.frame(th3)$X, as.data.frame(th3)$Y, type = \"l\")"},{"path":"https://deephaven.io/core/rdoc/articles/rdeephaven.html","id":"powerful-table-operations","dir":"Articles","previous_headings":"","what":"Powerful table operations","title":"Overview of the Deephaven Core R Client","text":"Much power Deephaven’s suite table operations achieved use update_by() agg_by() methods. table methods important enough warrant documentation pages, accessible running vignette(\"update_by\") vignette(\"agg_by\"). methods come suites functions, prefixed agg_ uby_ respectively, listed documentation pages. Running ls(\"package:rdeephaven\") reveal functions included package methods, important get acquainted .","code":""},{"path":"https://deephaven.io/core/rdoc/articles/rdeephaven.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting help","title":"Overview of the Deephaven Core R Client","text":"’ve done best provide good documentation package, may find need help documentation offer. Please visit official Deephaven Community Core documentation learn Deephaven find comprehensive examples. Additionally, feel free reach us Deephaven Community Slack channel questions. hope find real-time data analysis R easy possible.","code":""},{"path":"https://deephaven.io/core/rdoc/articles/update_by.html","id":"applying-updateby-operations-to-a-table","dir":"Articles","previous_headings":"","what":"Applying UpdateBy operations to a table","title":"Moving Operations with update_by","text":"table method update_by() entry point UpdateBy operations. takes two arguments: first UpdateByOp list UpdateByOps denoting calculations perform specific columns table. , takes column name list column names define groups perform calculations. don’t want grouped calculations, omit argument. learn UpdateByOps, see reference documentation ?UpdateByOp. update_by() method know anything columns want perform calculations. Rather, desired columns passed individual uby functions, enabling massive amount flexibility.","code":""},{"path":"https://deephaven.io/core/rdoc/articles/update_by.html","id":"uby-functions","dir":"Articles","previous_headings":"","what":"uby functions","title":"Moving Operations with update_by","text":"uby functions workers actually execute complex UpdateBy calculations. functions generators, meaning return functions Deephaven engine knows interpret. call functions return UpdateByOps. See ?UpdateByOp information. UpdateByOps R-level functions, Deephaven-specific data types perform intensive calculations. list uby functions available Deephaven: uby_cum_min() uby_cum_max() uby_cum_sum() uby_cum_prod() uby_forward_fill() uby_delta() uby_emmin_tick() uby_emmin_time() uby_emmax_tick() uby_emmax_time() uby_ems_tick() uby_ems_time() uby_ema_tick() uby_ema_time() uby_emstd_tick() uby_emstd_time() uby_rolling_count_tick() uby_rolling_count_time() uby_rolling_group_tick() uby_rolling_group_time() uby_rolling_min_tick() uby_rolling_min_time() uby_rolling_max_tick() uby_rolling_max_time() uby_rolling_sum_tick() uby_rolling_sum_time() uby_rolling_prod_tick() uby_rolling_prod_time() uby_rolling_avg_tick() uby_rolling_avg_time() uby_rolling_wavg_tick() uby_rolling_wavg_time() uby_rolling_std_tick() uby_rolling_std_time() details aggregation function, see reference documentation running ?uby_cum_min, ?uby_delta, etc.","code":""},{"path":"https://deephaven.io/core/rdoc/articles/update_by.html","id":"an-example","dir":"Articles","previous_headings":"","what":"An Example","title":"Moving Operations with update_by","text":"","code":"library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-row exponential weighted moving average of col1 and col2, grouped by boolCol th1 <- th$   update_by(uby_ema_tick(decay_ticks = 10, cols = c(\"col1Ema = col1\", \"col2Ema = col2\")), by = \"boolCol\")  # compute rolling 10-second weighted average and standard deviation of col1 and col2, weighted by col3 th2 <- th$   update_by(   c(     uby_rolling_wavg_time(ts_col = \"timeCol\", wcol = \"col3\", cols = c(\"col1WAvg = col1\", \"col2WAvg = col2\"), rev_time = \"PT10s\"),     uby_rolling_std_time(ts_col = \"timeCol\", cols = c(\"col1Std = col1\", \"col2Std = col2\"), rev_time = \"PT10s\")   ) )  # compute cumulative minimum and maximum of col1 and col2 respectively, and the rolling 20-row sum of col3, grouped by boolCol th3 <- th$   update_by(   c(     uby_cum_min(cols = \"col1\"),     uby_cum_max(cols = \"col2\"),     uby_rolling_sum_tick(cols = \"col3\", rev_ticks = 20)   ),   by = \"boolCol\" )  client$close() }"},{"path":"https://deephaven.io/core/rdoc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Peters. Maintainer.","code":""},{"path":"https://deephaven.io/core/rdoc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Labs DD (2023). rdeephaven: R Client Deephaven Core. R package version 0.31.0.","code":"@Manual{,   title = {rdeephaven: R Client for Deephaven Core},   author = {Deephaven Data Labs},   year = {2023},   note = {R package version 0.31.0}, }"},{"path":"https://deephaven.io/core/rdoc/index.html","id":"the-deephaven-core-r-client","dir":"","previous_headings":"","what":"R Client for Deephaven Core","title":"R Client for Deephaven Core","text":"Deephaven Core R client R package enables R users interface Deephaven server perform various server-side operations comfort RStudio R interface.","code":""},{"path":"https://deephaven.io/core/rdoc/index.html","id":"what-can-the-r-client-do","dir":"","previous_headings":"","what":"What can the R client do?","title":"R Client for Deephaven Core","text":"R Client provides following functionalities: anonymous authentication (username password) basic authentication (username password) pre-shared key authentication (requires key) custom authentication (general key-value credentials) server equipped console, run script console Currently, Python Groovy supported Create static ticking tables server Construct execute complex queries Retrieve references tables server Pull table data Arrow RecordBatchReader, Arrow Table, dplyr Tibble, R Data Frame Create new tables server Arrow RecordBatchReader, Arrow Table, dplyr Tibble, R Data Frame Call Deephaven table methods familiar R functions","code":""},{"path":"https://deephaven.io/core/rdoc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Client for Deephaven Core","text":"Currently, R client supported Ubuntu 20.04 22.04 must built source. need working installation R machine R client built. R client requires R 4.1.2 newer; can install R standard packages made available Ubuntu 22.04. want newer R version running Ubuntu 20.04, install R CRAN: Build cpp-client (dependent libraries) according instructions https://github.com/deephaven/deephaven-core/blob/main/cpp-client/README.md. Follow instructions least point “Build install Deephaven C++ client”. point Deephaven C++ client C++ libraries depends , installed particular directory choosing. follows assume directory /path//dhcpp. Independently directory chosen installation, file called env.sh exist , local subdirectory well. Choose directory Deephaven R client source code live. , source code downloaded new directory called rdeephaven. Navigate directory clone subdirectory deephaven-core using git’s sparse-checkout: Set environment variables C++ client installation required building package. Use: /path//dhcpp directory created step (1) . can ensure environment variables necessary steps follow set checking values running commands: environment variables need defined installing package instructions . package installed, need LD_LIBRARY_PATH set R session intend use rdeephaven library. starting R command line, can set environment variable explained . using RStudio, see note following point. Refer instructions C++ client installation details dhcpp directory. faster compilation R client dependencies (particularly Arrow R client), use following commands: Start R console inside rdeephaven directory. console, install dephaven client dependencies (since building source, dependencies automatically pulled ): , exit R console quit(). rdeephaven directory, build install R client: needed typical install.packages() ensure vignettes get built installed. NOTE using RStudio step, environment variables set step 3 may persist RStudio R environment RStudio child process shell environment variables set (ie, RStudio started shell environment variables set shell). R supports using .Renviron file settings like . can generate right content add .Renviron file (creating new one) using script etc/generate-dotRenviron-lines.sh can create new .Renviron file deephave-core directory lines producing running etc/generate-dotRenviron-lines.sh shell set environment variables; script give right content .Renviron file. , create new R project existing deephaven-core directory using RStudio, corresponding R session inherit necessary environment variables successful compilation. RStudio Server used, must followed successful compilation. addition, use output script etc/generate-rserverdotconf-lines.sh add rserver.conf file RStudio Server installation (location file may depend particular RStudio server installation, common location /etc/rstudio/rserver.conf). Now, run R session, start using client! introduction package, run vignette(\"rdeephaven\"). NOTE error like occurs step 4: means C++ compiler know find relevant header files Deephaven C++ client. can happen handul reasons: 1. Step 1 skipped, Deephaven C++ client installed. case, please ensure client installed attempting build R client. 2. Deephaven C++ client installed, DHCPP environment variable set. test , run bash    echo $DHCPP returns empty string, set DHCPP according instructions step 1 bash    export DHCPP=/path//dhcpp 3. Deephaven C++ client installed DHCPP environment variable set, current project configured allow compiler access Deephaven dhcpp src directories. difficult give advice , IDE-dependent problem. Consult IDE’s documentation C/C++ compiler include paths information.","code":"# Download the key and install it $ wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | \\     sudo gpg --dearmor -o /usr/share/keyrings/r-project.gpg  # Add the R source list to apt's sources list $ echo \"deb [signed-by=/usr/share/keyrings/r-project.gpg] https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/\" | \\     sudo tee -a /etc/apt/sources.list.d/r-project.list  # update the apt package list $ apt update  # install R $ sudo apt install r-base r-recommended mkdir rdeephaven cd rdeephaven git init git remote add -f origin https://github.com/deephaven/deephaven-core.git git config core.sparseCheckout true echo \"R/rdeephaven\" >> .git/info/sparse-checkout git pull origin main source /path/to/dhcpp/env.sh echo $DHCPP echo $LD_LIBRARY_PATH export NCPUS=`getconf _NPROCESSORS_ONLN`  export MAKE=\"make -j$NCPUS\" install.packages(c('Rcpp', 'arrow', 'R6', 'dplyr')) cd .. && R CMD build rdeephaven && R CMD INSTALL --no-multiarch --with-keep.source rdeephaven_*.tar.gz && rm rdeephaven_*.tar.gz library(rdeephaven) client.cpp:7:10: fatal error: deephaven/client/client.h: No such file or directory  7 | #include \"deephaven/client/client.h\"    |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~ compilation terminated."},{"path":"https://deephaven.io/core/rdoc/index.html","id":"running-the-unit-tests","dir":"","previous_headings":"","what":"Running the unit tests","title":"R Client for Deephaven Core","text":"Deephaven R client utilizes R’s testthat package perform unit tests. order run unit tests, install testthat dependent packages: , R session rdeephaven installed, run unit tests:","code":"install.packages(c('testthat', 'lubridate', 'zoo')) library(testthat) test_package(\"rdeephaven\")"},{"path":"https://deephaven.io/core/rdoc/index.html","id":"debugging","dir":"","previous_headings":"","what":"Debugging","title":"R Client for Deephaven Core","text":"Deephaven R client written C++ wrapped Rcpp, standard R-level debugging sufficient many kinds problems associated C++ code. reason, debugging R client must done C++ debugger. recommend using Valgrind check memory bugs, using gdb thorough backtraces general debugging.","code":""},{"path":"https://deephaven.io/core/rdoc/index.html","id":"running-r-with-valgrind","dir":"","previous_headings":"Debugging","what":"Running R with Valgrind","title":"R Client for Deephaven Core","text":"following taken blog post, proven useful getting started Valgrind. 1. Install Valgrind sudo apt-get install valgrind sudo yum install valgrind 2. Run R Valgrind R -d valgrind OS-dependent problems may come either step, simplest solution use Linux machine VM one available. Attempting steps Linux Docker image may also prove difficult, certainly fail host architecture AMD/X86.","code":""},{"path":"https://deephaven.io/core/rdoc/index.html","id":"running-r-with-gdb","dir":"","previous_headings":"Debugging","what":"Running R with gdb","title":"R Client for Deephaven Core","text":"article good resource running R gdb, also touches Valgrind use. several ways run R gdb, outline text-based approach given near bottom page. 1. Install gdb sudo apt-get install gdb sudo yum install gdb 2. Start gdb R attached R -d gdb. start gdb session denoted (gdb) console. 3. gdb session, start R console (gdb) run Valgrind gdb debugging done console, interactive IDE. may way make RStudio play well Valgrind gdb, beyond scope instructions.","code":""},{"path":"https://deephaven.io/core/rdoc/index.html","id":"enabling-debug-level-logging-for-grpc-and-the-c-layer-of-the-deephaven-r-client","dir":"","previous_headings":"Debugging","what":"Enabling DEBUG level logging for gRPC and the C++ layer of the Deephaven R client","title":"R Client for Deephaven Core","text":"C++ component Deephaven R client uses C++ implementation gRPC exchange messages Deephaven server. gRPC internal logging component can configured log stderr detail information connection state messages exchanged client server; Deephaven R client also uses logging component show client state information. can useful debugging purposes. enable detailed logging, set environment variable GRPC_VERVOSITY=DEBUG","code":""},{"path":"https://deephaven.io/core/rdoc/index.html","id":"code-styling","dir":"","previous_headings":"","what":"Code Styling","title":"R Client for Deephaven Core","text":"Deephaven R client uses Tidyverse styleguide code formatting, implements style styler package. contributions, ensure code properly styled according Tidyverse standards running following code R console, /path//rdeephaven path root directory package.","code":"setwd(\"/path/to/rdeephaven\") install.packages(\"styler\") library(styler) style_pkg()"},{"path":"https://deephaven.io/core/rdoc/index.html","id":"high-level-design-overview","dir":"","previous_headings":"","what":"High-level design overview","title":"R Client for Deephaven Core","text":"R client uses Deephaven C++ client backend connecting communicating server. Deephaven-specific feature R client , level, API equivalent feature C++ client. make Deephaven’s C++ client API available R, R6 class provides R interface Rcpp wrapped parts C++ API. Deephaven’s C++ API can create Arrow tables, R Arrow library. Arrow -memory data format, Arrow data can transferred R C++ simply passing pointer languages using Arrow C Stream Interface. data copies required.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/AggOp.html","id":null,"dir":"Reference","previous_headings":"","what":"Deephaven AggOps — AggOp","title":"Deephaven AggOps — AggOp","text":"AggOp return type one Deephaven's agg functions. function performs computation specified agg function. intended passed directly agg_by() agg_all_by(), never instantiated directly user code. information, see vignette agg functions vignette(\"agg_by\"). multiple tables schema aggregations need applied table, saving objects directly variable may useful avoid re-create time:   example, aggregations vector two AggOps can reused multiple calls agg_by().","code":"aggregations <- c(agg_min(\"XMin = X\", \"YMin = Y\"),                   agg_max(\"XMax = X\", \"YMax = Y\"))  result1 <- th1$agg_by(aggregations, by=\"Group\") result2 <- th2$agg_by(aggregations, by=\"Group\")"},{"path":[]},{"path":"https://deephaven.io/core/rdoc/reference/AggOp.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Deephaven AggOps — AggOp","text":"AggOp$new()","code":""},{"path":[]},{"path":"https://deephaven.io/core/rdoc/reference/AggOp.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven AggOps — AggOp","text":"","code":"AggOp$new(aggregation, agg_name, ...)"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":null,"dir":"Reference","previous_headings":"","what":"The Deephaven Client — Client","title":"The Deephaven Client — Client","text":"Client entry point interacting Deephaven server. used create new tables, import data export data server, run queries server.","code":""},{"path":[]},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"The Deephaven Client — Client","text":"Client$new() Client$initialize_for_xptr() Client$initialize_for_target() Client$empty_table() Client$time_table() Client$open_table() Client$import_table() Client$ticket_to_table() Client$run_script() Client$close()","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"The Deephaven Client — Client","text":"Calls initialize_for_xptr() first argument external pointer, initialize_for_target() first argument string. latter case, remaining keyword arguments passed initialize_for_target().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$new(...)"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Deephaven Client — Client","text":"... Either external pointer existing client connection, string denoting address running Deephaven server followed keyword arguments initialize_from_target().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-initialize-for-xptr-","dir":"Reference","previous_headings":"","what":"Method initialize_for_xptr()","title":"The Deephaven Client — Client","text":"Initializes Client object using pointer existing client connection.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$initialize_for_xptr(xptr)"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Deephaven Client — Client","text":"xptr External pointer existing client connection.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-initialize-for-target-","dir":"Reference","previous_headings":"","what":"Method initialize_for_target()","title":"The Deephaven Client — Client","text":"Initializes Client object connects Deephaven server.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$initialize_for_target(   target,   auth_type = \"anonymous\",   username = \"\",   password = \"\",   auth_token = \"\",   session_type = \"python\",   use_tls = FALSE,   tls_root_certs = \"\",   int_options = list(),   string_options = list(),   extra_headers = list() )"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Deephaven Client — Client","text":"target String denoting address Deephaven server, formatted \"ip:port\". auth_type String denoting authentication type. Can \"anonymous\", \"basic\", \"psk\", custom-built authenticator supported server. Default \"anonymous\". username String denoting username, applies auth_type \"basic\". Username password used conjunction auth_token. Defaults empty string. password String denoting password, applies auth_type \"basic\". Username password used conjunction auth_token. Defaults empty string. auth_token String denoting authentication token. auth_type \"anonymous\", ignored; auth_type \"basic\", must \"user:password\" left blank; auth_type \"psk\", must pre-shared key, auth_type custom-built authenticator, must conform specific requirement authenticator. used conjunction username password. Defaults empty string. session_type String denoting session type supported server. Currently, \"python\" \"groovy\" supported. Defaults \"python\". use_tls Whether use TLS connection. Defaults FALSE. tls_root_certs String denoting PEM encoded root certificates use TLS connection, \"\" use system defaults. used use_tls == TRUE. Defaults system defaults. int_options List name-value pairs int-valued options underlying grpc channel creation. Defaults empty list, implies using channel options. string_options List name-value pairs string-valued options underlying grpc channel creation. Defaults empty list, implies using channel options. extra_headers List name-value pairs additional headers values add server requests. Defaults empty list, implies using extra headers.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-empty-table-","dir":"Reference","previous_headings":"","what":"Method empty_table()","title":"The Deephaven Client — Client","text":"Creates empty table server size rows columns.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$empty_table(size)"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Deephaven Client — Client","text":"size Non-negative integer specifying number rows new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"The Deephaven Client — Client","text":"TableHandle reference new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-time-table-","dir":"Reference","previous_headings":"","what":"Method time_table()","title":"The Deephaven Client — Client","text":"Creates ticking table server.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$time_table(period, start_time = \"now\")"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Deephaven Client — Client","text":"period ISO-8601-formatted string specifying update frequency new table. start_time Optional ISO-8601-formatted string specifying start time table. Defaults now.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"The Deephaven Client — Client","text":"TableHandle reference new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-open-table-","dir":"Reference","previous_headings":"","what":"Method open_table()","title":"The Deephaven Client — Client","text":"Retrieves reference named table server using name.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$open_table(name)"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Deephaven Client — Client","text":"name String denoting name table retrieve.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"The Deephaven Client — Client","text":"TableHandle reference named table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-import-table-","dir":"Reference","previous_headings":"","what":"Method import_table()","title":"The Deephaven Client — Client","text":"Imports new table Deephaven server. Note new table automatically bound variable name server. See ?TableHandle information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$import_table(table_object)"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Deephaven Client — Client","text":"table_object R Data Frame, dplyr Tibble, Arrow Table, Arrow RecordBatchReader, supported table containing data import server.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"The Deephaven Client — Client","text":"TableHandle reference new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-ticket-to-table-","dir":"Reference","previous_headings":"","what":"Method ticket_to_table()","title":"The Deephaven Client — Client","text":"Retrieves reference named table server using Arrow Flight ticket.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$ticket_to_table(ticket)"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Deephaven Client — Client","text":"ticket String denoting Arrow Flight ticket.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"The Deephaven Client — Client","text":"TableHandle reference table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-run-script-","dir":"Reference","previous_headings":"","what":"Method run_script()","title":"The Deephaven Client — Client","text":"Runs script server. script must language server console started .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$run_script(script)"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Deephaven Client — Client","text":"script String containing code executed server.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"method-close-","dir":"Reference","previous_headings":"","what":"Method close()","title":"The Deephaven Client — Client","text":"Closes client connection. method called, server calls undefined likely result error.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"The Deephaven Client — Client","text":"","code":"Client$close()"},{"path":"https://deephaven.io/core/rdoc/reference/Client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Deephaven Client — Client","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create a data frame and push it to the server, retrieve a reference to it as a TableHandle df <- data.frame(   col1 = c(1, 2, 3),   col2 = c(\"a\", \"b\", \"c\"),   col3 = c(TRUE, FALSE, TRUE) ) th1 <- client$import_table(df) as.data.frame(th1)  # give table referenced by 'th' a name on the server th1$bind_to_variable(\"server_table\")  # use client to execute script client$run_script('server_table_new = server_table.update(\"col4 = col1 + 1\")')  # retrieve reference to new table on the server th2 <- client$open_table(\"server_table_new\") as.data.frame(th2)  # create table on server directly with table API and retrieve a reference to it as a TableHandle th3 <- client$empty_table(10)$update(\"col1 = i\") as.data.frame(th3)  # create ticking table on the server and retrieve a reference to it as a TableHandle th4 <- client$time_table(\"PT1S\")$update(\"col1 = i\") Sys.sleep(5) as.data.frame(th4) Sys.sleep(5) as.data.frame(th4) Sys.sleep(5) as.data.frame(th4)  # close client connection client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/OperationControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Deephaven OperationControl — OperationControl","title":"Deephaven OperationControl — OperationControl","text":"OperationControl return type Deephaven's op_control function. function determines special values handled context update_by operation. OperationControl intended passed directly uby function, never instantiated directly user code. plan use operation control parameters multiple uby functions one update_by calls, consider creating OperationControl object reusing . example:","code":"opc <- op_control(on_null = 'skip', on_nan = 'poison', big_value_context = 'decimal64')  result <- th$update_by(c(uby_ema_tick(5, c(\"XEma = X\", \"YEma = Y\"), opc),                          uby_emstd_tick(5, c(\"XEmstd = X\", \"YEmstd = Y\"), opc)),                        by=\"Group\")"},{"path":[]},{"path":"https://deephaven.io/core/rdoc/reference/OperationControl.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Deephaven OperationControl — OperationControl","text":"OperationControl$new()","code":""},{"path":[]},{"path":"https://deephaven.io/core/rdoc/reference/OperationControl.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven OperationControl — OperationControl","text":"","code":"OperationControl$new(op_control)"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":null,"dir":"Reference","previous_headings":"","what":"Deephaven TableHandles — TableHandle","title":"Deephaven TableHandles — TableHandle","text":"TableHandle holds reference Deephaven Table server, provides methods operating table. Note TableHandles instantiated directly user code, rather server calls accessible Client class. See ?Client information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"naming-tables-on-the-server","dir":"Reference","previous_headings":"","what":"Naming tables on the server","title":"Deephaven TableHandles — TableHandle","text":"TableHandle created, automatically bound variable name server. means TableHandle gets created reference table created. Importantly, variable name given TableHandle purely local variable, relationship table's name server. reason, code like following:   run, table referenced local variable t1 named server . make table referenced t1 accessible name server (e.g., within query strings), must bind variable method bind_to_variable(). adopt convention calling local TableHandles th1, th2, etc., server-side tables t1, t2, etc., help distinguish two. , code written :   can create local TableHandle reference t2 follows:   code best practice; calling update() directly t1 preferred running script. , however, illustrative relationship local TableHandles server-side tables. best way accomplish following:","code":"client <- Client$new(...) df1 <- data.frame(x = 1:10, y = 11:20) t1 <- client$import_table(df1) client$run_script(\"t2 = t1.update('z = x + y')\") client <- Client$new(...) df1 <- data.frame(x = 1:10, y = 11:20) th1 <- client$import_table(df1) th1$bind_to_variable(\"t1\") client$run_script(\"t2 = t1.update('z = x + y')\") th2 <- client$open_table(\"t2\") client <- Client$new(...) df1 <- data.frame(x = 1:10, y = 11:20) th1 <- client$import_table(df1) th2 <- th1$update(\"z = x + y\")  # this is necessary to access the tables from within query strings th1$bind_to_variable(\"t1\") th2$bind_to_variable(\"t2\")"},{"path":[]},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Deephaven TableHandles — TableHandle","text":"TableHandle$new() TableHandle$is_static() TableHandle$bind_to_variable() TableHandle$head() TableHandle$tail() TableHandle$nrow() TableHandle$ncol() TableHandle$dim() TableHandle$merge() TableHandle$as_record_batch_reader() TableHandle$as_arrow_table() TableHandle$as_tibble() TableHandle$as_data_frame() TableHandle$select() TableHandle$view() TableHandle$update() TableHandle$update_view() TableHandle$drop_columns() TableHandle$() TableHandle$group_by() TableHandle$ungroup() TableHandle$update_by() TableHandle$agg_by() TableHandle$agg_all_by() TableHandle$first_by() TableHandle$last_by() TableHandle$head_by() TableHandle$tail_by() TableHandle$min_by() TableHandle$max_by() TableHandle$sum_by() TableHandle$abs_sum_by() TableHandle$avg_by() TableHandle$w_avg_by() TableHandle$median_by() TableHandle$var_by() TableHandle$std_by() TableHandle$percentile_by() TableHandle$count_by() TableHandle$join() TableHandle$natural_join() TableHandle$exact_join() TableHandle$sort()","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Deephaven TableHandles — TableHandle","text":"Initializes new TableHandle internal Deephaven TableHandle.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$new(table_handle)"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"table_handle Internal Deephaven TableHandle.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-is-static-","dir":"Reference","previous_headings":"","what":"Method is_static()","title":"Deephaven TableHandles — TableHandle","text":"Determines whether table referenced TableHandle static .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$is_static()"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TRUE table static, FALSE table ticking.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-bind-to-variable-","dir":"Reference","previous_headings":"","what":"Method bind_to_variable()","title":"Deephaven TableHandles — TableHandle","text":"Binds table referenced TableHandle variable server, can referenced name.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$bind_to_variable(name)"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"name Name table server.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing first n rows table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$head(n)"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"n Positive integer specifying number rows return.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-tail-","dir":"Reference","previous_headings":"","what":"Method tail()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing last n rows table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$tail(n)"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"n Positive integer specifying number rows return.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table consisting last n rows parent table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-nrow-","dir":"Reference","previous_headings":"","what":"Method nrow()","title":"Deephaven TableHandles — TableHandle","text":"Gets number rows table referenced TableHandle.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$nrow()"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"number rows table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-ncol-","dir":"Reference","previous_headings":"","what":"Method ncol()","title":"Deephaven TableHandles — TableHandle","text":"Gets number columns table referenced TableHandle.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$ncol()"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"number columns table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-dim-","dir":"Reference","previous_headings":"","what":"Method dim()","title":"Deephaven TableHandles — TableHandle","text":"Gets dimensions table referenced TableHandle. Equivalent c(nrow, ncol).","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$dim()"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"vector length 2, first element number rows table second element number columns table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-merge-","dir":"Reference","previous_headings":"","what":"Method merge()","title":"Deephaven TableHandles — TableHandle","text":"Merges several tables one table server. tables must schema table, can supplied list TableHandles, number TableHandles, mix .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$merge(...)"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"... Arbitrary number TableHandles vectors TableHandles schema matching table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-as-record-batch-reader-","dir":"Reference","previous_headings":"","what":"Method as_record_batch_reader()","title":"Deephaven TableHandles — TableHandle","text":"Converts table referenced TableHandle Arrow RecordBatchStreamReader.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$as_record_batch_reader()"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"Arrow RecordBatchStreamReader constructed data TableHandle.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-as-arrow-table-","dir":"Reference","previous_headings":"","what":"Method as_arrow_table()","title":"Deephaven TableHandles — TableHandle","text":"Converts table referenced TableHandle Arrow Table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$as_arrow_table()"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"Arrow Table constructed data TableHandle.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-as-tibble-","dir":"Reference","previous_headings":"","what":"Method as_tibble()","title":"Deephaven TableHandles — TableHandle","text":"Converts table referenced TableHandle dplyr tibble.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$as_tibble()"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"dplyr tibble constructed data TableHandle.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-as-data-frame-","dir":"Reference","previous_headings":"","what":"Method as_data_frame()","title":"Deephaven TableHandles — TableHandle","text":"Converts table referenced TableHandle R data frame.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$as_data_frame()"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"R data frame constructed data TableHandle.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-select-","dir":"Reference","previous_headings":"","what":"Method select()","title":"Deephaven TableHandles — TableHandle","text":"Creates new -memory table includes one column formula. formula specified, columns included.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$select(formulas = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"formulas String list strings denoting column formulas.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-view-","dir":"Reference","previous_headings":"","what":"Method view()","title":"Deephaven TableHandles — TableHandle","text":"Creates new formula table includes one column formula.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$view(formulas = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"formulas String list strings denoting column formulas.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing new, -memory column formula.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$update(formulas = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"formulas String list strings denoting column formulas.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-update-view-","dir":"Reference","previous_headings":"","what":"Method update_view()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing new formula column formula.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$update_view(formulas = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"formulas String list strings denoting column formulas.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-drop-columns-","dir":"Reference","previous_headings":"","what":"Method drop_columns()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table number rows table, omits columns specified cols.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$drop_columns(cols = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"cols String list strings denoting names columns drop.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-where-","dir":"Reference","previous_headings":"","what":"Method where()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing rows meeting filter condition.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$where(filter)"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"filter String denoting filter condition.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-group-by-","dir":"Reference","previous_headings":"","what":"Method group_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing grouping columns grouped data, column content grouped arrays. group-column given, content column grouped array.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$group_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-ungroup-","dir":"Reference","previous_headings":"","what":"Method ungroup()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table array columns source table unwrapped separate rows. ungroup columns array types.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$ungroup(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns ungroup.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-update-by-","dir":"Reference","previous_headings":"","what":"Method update_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates table additional columns calculated window-based aggregations columns table. aggregations defined provided operations, support incremental aggregations corresponding rows table. aggregations apply position time-based windowing compute results entire table row group identified provided key columns. See detailed documentation run ?UpdateBy.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$update_by(ops, by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"ops UpdateByOp list UpdateByOps perform non-grouping columns. String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-agg-by-","dir":"Reference","previous_headings":"","what":"Method agg_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing grouping columns grouped data. resulting grouped data defined aggregation(s) specified. See detailed documentation run ?AggBy.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$agg_by(aggs, by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"aggs AggOp list AggOps perform non-grouping columns. String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-agg-all-by-","dir":"Reference","previous_headings":"","what":"Method agg_all_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing grouping columns grouped data. resulting grouped data defined aggregation(s) specified. See detailed documentation run ?AggBy. method applies aggregation non-grouping columns table, can accept one aggregation time.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$agg_all_by(agg, by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"agg AggOp perform non-grouping columns. String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-first-by-","dir":"Reference","previous_headings":"","what":"Method first_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing first row group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$first_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-last-by-","dir":"Reference","previous_headings":"","what":"Method last_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing last row group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$last_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-head-by-","dir":"Reference","previous_headings":"","what":"Method head_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing first num_rows rows group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$head_by(num_rows, by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"num_rows Positive integer specifying number rows return. String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-tail-by-","dir":"Reference","previous_headings":"","what":"Method tail_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing last num_rows rows group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$tail_by(num_rows, by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"num_rows Positive integer specifying number rows return. String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-25","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-min-by-","dir":"Reference","previous_headings":"","what":"Method min_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise minimum group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$min_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-26","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-max-by-","dir":"Reference","previous_headings":"","what":"Method max_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise maximum group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$max_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-27","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-sum-by-","dir":"Reference","previous_headings":"","what":"Method sum_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise sum group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$sum_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-28","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-abs-sum-by-","dir":"Reference","previous_headings":"","what":"Method abs_sum_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise absolute sum group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$abs_sum_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-29","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-avg-by-","dir":"Reference","previous_headings":"","what":"Method avg_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise average group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$avg_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-30","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-w-avg-by-","dir":"Reference","previous_headings":"","what":"Method w_avg_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise weighted average group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$w_avg_by(wcol, by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"wcol String denoting name column use weights. String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-31","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-median-by-","dir":"Reference","previous_headings":"","what":"Method median_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise median group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$median_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-32","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-var-by-","dir":"Reference","previous_headings":"","what":"Method var_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise variance group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-35","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$var_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-27","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-33","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-std-by-","dir":"Reference","previous_headings":"","what":"Method std_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise standard deviation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-36","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$std_by(by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-28","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-34","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-percentile-by-","dir":"Reference","previous_headings":"","what":"Method percentile_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing column-wise percentile group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-37","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$percentile_by(percentile, by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-29","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"percentile Numeric scalar 0 1 denoting percentile compute. String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-35","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-count-by-","dir":"Reference","previous_headings":"","what":"Method count_by()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing number rows group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-38","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$count_by(col, by = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-30","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"col String denoting name new column hold counts group. String list strings denoting names columns group .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-36","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-join-","dir":"Reference","previous_headings":"","what":"Method join()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing rows matching values tables. Rows matching criteria included result. multiple matches row left table rows right table, matching combinations included. columns match () specified, every combination left right table rows included.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-39","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$join(table, on = character(), joins = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-31","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"table TableHandle referencing table join . String list strings denoting names columns join . joins String list strings denoting names columns add table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-37","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-natural-join-","dir":"Reference","previous_headings":"","what":"Method natural_join()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing rows columns table, plus additional columns containing data right table. columns appended left table (joins), row values equal row values right table key values left right tables equal. matching key right table, appended row values NULL.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-40","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$natural_join(table, on = character(), joins = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-32","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"table TableHandle referencing table join . String list strings denoting names columns join . joins String list strings denoting names columns add table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-38","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-exact-join-","dir":"Reference","previous_headings":"","what":"Method exact_join()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing rows columns table, plus additional columns containing data right table. columns appended left table (joins), row values equal row values right table key values left right tables equal.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-41","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$exact_join(table, on = character(), joins = character())"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-33","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"table TableHandle referencing table join . String list strings denoting names columns join . joins String list strings denoting names columns add table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-39","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"method-sort-","dir":"Reference","previous_headings":"","what":"Method sort()","title":"Deephaven TableHandles — TableHandle","text":"Creates new table containing rows columns table, sorted specified columns.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"usage-42","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven TableHandles — TableHandle","text":"","code":"TableHandle$sort(order_by, descending = FALSE, abs_sort = FALSE)"},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"arguments-34","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deephaven TableHandles — TableHandle","text":"order_by String list strings denoting names columns sort . descending Boolean list booleans denoting whether sort descending order. list supplied, must length order_by. abs_sort Boolean list booleans denoting whether sort absolute value. list supplied, must length order_by.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"returns-40","dir":"Reference","previous_headings":"","what":"Returns","title":"Deephaven TableHandles — TableHandle","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/TableHandle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deephaven TableHandles — TableHandle","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create a data frame, push it to the server, and retrieve a TableHandle referencing the new table df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:50],   boolCol = sample(c(TRUE, FALSE), 50, TRUE),   col1 = sample(1000, size = 50, replace = TRUE),   col2 = sample(1000, size = 50, replace = TRUE),   col3 = 1:50 ) th <- client$import_table(df)  # get the dimension of the table dim(th)  # get the last 10 rows of the table th2 <- tail(th, 10) as.data.frame(th2)  # create several new columns th3 <- th$update(c(\"col4 = col1 + col2\", \"charCol = col3 % 2 == 0 ? `A` : `B`\")) as.data.frame(th3)  # filter based on parity of col3 th4 <- th3$where(\"charCol == `A`\") as.data.frame(th4)  # select a subset of columns th5 <- th3$select(c(\"timeCol\", \"col1\", \"col4\")) as.data.frame(th5)  # drop timestamp column and get sum of remaining columns grouped by boolCol and charCol th6 <- th3$   drop_columns(\"timeCol\")$   sum_by(c(\"boolCol\", \"charCol\")) as.data.frame(th6)  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/UpdateByOp.html","id":null,"dir":"Reference","previous_headings":"","what":"Deephaven UpdateByOps — UpdateByOp","title":"Deephaven UpdateByOps — UpdateByOp","text":"UpdateByOp return type one Deephaven's uby functions. function performs computation specified uby function. intended passed directly update_by(), never instantiated directly user code. information, see vignette uby functions vignette(\"update_by\"). multiple tables schema UpdateBy operations need applied table, saving objects directly variable may useful avoid re-create time:   example, operations vector two UpdateByOps can reused multiple calls update_by().","code":"operations <- c(uby_rolling_avg_tick(\"XAvg = X\", \"YAvg = Y\"),                 uby_rolling_std_tick(\"XStd = X\", \"YStd = Y\"))  result1 <- th1$update_by(operations, by=\"Group\") result2 <- th2$update_by(operations, by=\"Group\")"},{"path":[]},{"path":"https://deephaven.io/core/rdoc/reference/UpdateByOp.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Deephaven UpdateByOps — UpdateByOp","text":"UpdateByOp$new()","code":""},{"path":[]},{"path":"https://deephaven.io/core/rdoc/reference/UpdateByOp.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deephaven UpdateByOps — UpdateByOp","text":"","code":"UpdateByOp$new(update_by_op)"},{"path":"https://deephaven.io/core/rdoc/reference/agg_abs_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Absolute sum of specified columns by group — agg_abs_sum","title":"Absolute sum of specified columns by group — agg_abs_sum","text":"Creates Absolute Sum aggregation computes absolute sum column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_abs_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Absolute sum of specified columns by group — agg_abs_sum","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_abs_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Absolute sum of specified columns by group — agg_abs_sum","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_abs_sum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Absolute sum of specified columns by group — agg_abs_sum","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_abs_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Absolute sum of specified columns by group — agg_abs_sum","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # compute absolute sum of Number1 and Number2 th1 <- th$   agg_by(agg_abs_sum(c(\"Number1\", \"Number2\")))  # compute absolute sum of Number1 and Number2 grouped by X th2 <- th$   agg_by(agg_abs_sum(c(\"Number1\", \"Number2\")), by = \"X\")  # compute absolute sum of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_abs_sum(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_avg.html","id":null,"dir":"Reference","previous_headings":"","what":"Average of specified columns by group — agg_avg","title":"Average of specified columns by group — agg_avg","text":"Creates Average aggregation computes average column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average of specified columns by group — agg_avg","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average of specified columns by group — agg_avg","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_avg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Average of specified columns by group — agg_avg","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_avg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average of specified columns by group — agg_avg","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # compute average of Number1 and Number2 th1 <- th$   agg_by(agg_avg(c(\"Number1\", \"Number2\")))  # compute average of Number1 and Number2 grouped by X th2 <- th$   agg_by(agg_avg(c(\"Number1\", \"Number2\")), by = \"X\")  # compute average of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_avg(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of observations by group — agg_count","title":"Number of observations by group — agg_count","text":"Creates Count aggregation counts number rows aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of observations by group — agg_count","text":"col String denoting name new column hold counts aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of observations by group — agg_count","text":"AggOp used call agg_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_count.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of observations by group — agg_count","text":"aggregation groups function acts defined parameter agg_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\"). Note operation supported agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of observations by group — agg_count","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # count number of elements in each group when grouped by X, name resulting column \"count\" th1 <- th$   agg_by(agg_count(\"count\"), by = \"X\")  # count number of elements in each group when grouped by X and Y, name resulting column \"CountingCol\" th2 <- th$   agg_by(agg_count(\"CountingCol\"), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_first.html","id":null,"dir":"Reference","previous_headings":"","what":"First element of specified columns by group — agg_first","title":"First element of specified columns by group — agg_first","text":"Creates First aggregation computes first value column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_first.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"First element of specified columns by group — agg_first","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_first.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"First element of specified columns by group — agg_first","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_first.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"First element of specified columns by group — agg_first","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_first.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"First element of specified columns by group — agg_first","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # get first elements of all columns th1 <- th$   agg_by(agg_first(c(\"X\", \"Y\", \"Number1\", \"Number2\")))  # get first elements of Y, Number1, and Number2 grouped by X th2 <- th$   agg_by(agg_first(c(\"Y\", \"Number1\", \"Number2\")), by = \"X\")  # get first elements of Number1 and Number2 grouped by X and Y th3 <- th agg_by(agg_first(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_last.html","id":null,"dir":"Reference","previous_headings":"","what":"Last element of specified columns by group — agg_last","title":"Last element of specified columns by group — agg_last","text":"Creates Last aggregation computes last value column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_last.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Last element of specified columns by group — agg_last","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_last.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Last element of specified columns by group — agg_last","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_last.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Last element of specified columns by group — agg_last","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_last.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Last element of specified columns by group — agg_last","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # get last elements of all columns th1 <- th$   agg_by(agg_last(c(\"X\", \"Y\", \"Number1\", \"Number2\")))  # get last elements of Y, Number1, and Number2 grouped by X th2 <- th$   agg_by(agg_last(c(\"Y\", \"Number1\", \"Number2\")), by = \"X\")  # get last elements of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_last(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum of specified columns by group — agg_max","title":"Maximum of specified columns by group — agg_max","text":"Creates Maximum aggregation computes maximum column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum of specified columns by group — agg_max","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum of specified columns by group — agg_max","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum of specified columns by group — agg_max","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum of specified columns by group — agg_max","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # get maximum elements of Number1 and Number2 th1 <- th$   agg_by(agg_max(c(\"Number1\", \"Number2\")))  # get maximum elements of Number1 and Number2 grouped by X th2 <- th$   agg_by(agg_max(c(\"Number1\", \"Number2\")), by = \"X\")  # get maximum elements of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_max(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Median of specified columns by group — agg_median","title":"Median of specified columns by group — agg_median","text":"Creates Median aggregation computes median column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median of specified columns by group — agg_median","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median of specified columns by group — agg_median","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Median of specified columns by group — agg_median","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Median of specified columns by group — agg_median","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # compute median of Number1 and Number2 th1 <- th$   agg_by(agg_median(c(\"Number1\", \"Number2\")))  # compute median of Number1 and Number2 grouped by X th2 <- th$   agg_by(agg_median(c(\"Number1\", \"Number2\")), by = \"X\")  # compute median of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_median(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum of specified columns by group — agg_min","title":"Minimum of specified columns by group — agg_min","text":"Creates Minimum aggregation computes minimum column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum of specified columns by group — agg_min","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum of specified columns by group — agg_min","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_min.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimum of specified columns by group — agg_min","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum of specified columns by group — agg_min","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # get minimum elements of Number1 and Number2 th1 <- th$   agg_by(agg_min(c(\"Number1\", \"Number2\")))  # get minimum elements of Number1 and Number2 grouped by X th2 <- th$   agg_by(agg_min(c(\"Number1\", \"Number2\")), by = \"X\")  # get minimum elements of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_min(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_percentile.html","id":null,"dir":"Reference","previous_headings":"","what":"p-th percentile of specified columns by group — agg_percentile","title":"p-th percentile of specified columns by group — agg_percentile","text":"Creates Percentile aggregation computes given percentile column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_percentile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"p-th percentile of specified columns by group — agg_percentile","text":"percentile Numeric scalar 0 1 denoting percentile compute. cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_percentile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"p-th percentile of specified columns by group — agg_percentile","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_percentile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"p-th percentile of specified columns by group — agg_percentile","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_percentile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"p-th percentile of specified columns by group — agg_percentile","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # compute 20th percentile of Number1 and Number2 th1 <- th$   agg_by(agg_percentile(percentile = 0.2, cols = c(\"Number1\", \"Number2\")))  # compute 50th percentile of Number1 and Number2 grouped by X th2 <- th$   agg_by(agg_percentile(percentile = 0.5, cols = c(\"Number1\", \"Number2\")), by = \"X\")  # compute 75th percentile of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_percentile(percentile = 0.75, cols = c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_std.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard deviation of specified columns by group — agg_std","title":"Standard deviation of specified columns by group — agg_std","text":"Creates Standard Deviation aggregation computes standard deviation column cols, aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_std.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard deviation of specified columns by group — agg_std","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_std.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard deviation of specified columns by group — agg_std","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_std.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard deviation of specified columns by group — agg_std","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_std.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard deviation of specified columns by group — agg_std","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # compute standard deviation of Number1 and Number2 th1 <- th$   agg_by(agg_std(c(\"Number1\", \"Number2\")))  # compute standard deviation of Number1 and Number2 grouped by X th2 <- th$   agg_by(agg_std(c(\"Number1\", \"Number2\")), by = \"X\")  # compute standard deviation of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_std(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum element of specified columns by group — agg_sum","title":"Sum element of specified columns by group — agg_sum","text":"Creates Sum aggregation computes sum column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum element of specified columns by group — agg_sum","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum element of specified columns by group — agg_sum","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_sum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sum element of specified columns by group — agg_sum","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum element of specified columns by group — agg_sum","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # compute sum of Number1 and Number2 th1 <- th$   agg_by(agg_sum(c(\"Number1\", \"Number2\")))  # compute sum of Number1 and Number2 grouped by X th2 <- th$   agg_by(agg_sum(c(\"Number1\", \"Number2\")), by = \"X\")  # compute sum of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_sum(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of specified columns by group — agg_var","title":"Variance of specified columns by group — agg_var","text":"Creates Variance aggregation computes variance column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance of specified columns by group — agg_var","text":"cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of specified columns by group — agg_var","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variance of specified columns by group — agg_var","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of specified columns by group — agg_var","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # compute variance of Number1 and Number2 th1 <- th$   agg_by(agg_var(c(\"Number1\", \"Number2\")))  # compute variance of Number1 and Number2 grouped by X th2 <- th$   agg_by(agg_var(c(\"Number1\", \"Number2\")), by = \"X\")  # compute variance of Number1 and Number2 grouped by X and Y th3 <- th$   agg_by(agg_var(c(\"Number1\", \"Number2\")), by = c(\"X\", \"Y\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/agg_w_avg.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted average of specified columns by group — agg_w_avg","title":"Weighted average of specified columns by group — agg_w_avg","text":"Creates Weighted Average aggregation computes weighted average column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_w_avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted average of specified columns by group — agg_w_avg","text":"wcol String denoting column use weights. must numeric column. cols String list strings denoting column(s) aggregate. Can renaming expressions, .e. “new_col = col”. Default aggregate non-grouping columns, valid agg_all_by() operation.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_w_avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted average of specified columns by group — agg_w_avg","text":"AggOp used call agg_by() agg_all_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_w_avg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted average of specified columns by group — agg_w_avg","text":"aggregation groups function acts defined parameter agg_by() agg_all_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven agg functions, generator function. , output another function called AggOp intended used call agg_by() agg_all_by(). detail typically hidden user. However, important understand detail debugging purposes, output agg function can otherwise seem unexpected. information, see vignette agg functions running vignette(\"agg_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/agg_w_avg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted average of specified columns by group — agg_w_avg","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   X = c(\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"B\", \"C\"),   Y = c(\"M\", \"N\", \"O\", \"N\", \"P\", \"M\", \"O\", \"P\", \"M\"),   Number1 = c(100, -44, 49, 11, -66, 50, 29, 18, -70),   Number2 = c(-55, 76, 20, 130, 230, -50, 73, 137, 214) ) th <- client$import_table(df)  # compute weighted average of Number1, weighted by Number2 th1 <- th$   agg_by(agg_w_avg(wcol = \"Number2\", cols = \"Number1\"))  # compute weighted average of Number1, weighted by Number2, grouped by X th2 <- th$   agg_by(agg_w_avg(wcol = \"Number2\", cols = \"Number1\", by = \"X\"))  # compute weighted average of Number1, weighted by Number2, grouped by X and Y th3 <- th$   agg_by(agg_w_avg(wcol = \"Number2\", cols = \"Number1\", by = c(\"X\", \"Y\")))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/merge_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge tables with the same schema — merge_tables","title":"Merge tables with the same schema — merge_tables","text":"Merges several tables one table server. tables must schema, can supplied list TableHandles, number TableHandles, mix .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/merge_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge tables with the same schema — merge_tables","text":"","code":"merge_tables(...)"},{"path":"https://deephaven.io/core/rdoc/reference/merge_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge tables with the same schema — merge_tables","text":"... Arbitrary number TableHandles vectors TableHandles schema matching table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/merge_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge tables with the same schema — merge_tables","text":"TableHandle referencing new table.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/merge_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge tables with the same schema — merge_tables","text":"","code":"print(\"hello!\") #> [1] \"hello!\""},{"path":"https://deephaven.io/core/rdoc/reference/op_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Handling special values in some UpdateBy operations — op_control","title":"Handling special values in some UpdateBy operations — op_control","text":"Creates OperationControl controls behavior special values UpdateBy operations. function way properly create OperationControl object.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/op_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handling special values in some UpdateBy operations — op_control","text":"","code":"op_control(on_null = \"skip\", on_nan = \"skip\", big_value_context = \"decimal128\")"},{"path":"https://deephaven.io/core/rdoc/reference/op_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handling special values in some UpdateBy operations — op_control","text":"on_null Defines uby function handles null values encounters. 'skip' default. on_nan Defines uby function handles NaN values encounters. 'skip' default. big_value_context Defines uby function handles exceptionally large values encounters. 'decimal128' default.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/op_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handling special values in some UpdateBy operations — op_control","text":"OperationControl used uby function.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/op_control.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handling special values in some UpdateBy operations — op_control","text":"OperationControl defines control parameters uby functions used update_by() call. uby functions can use OperationControl handle erroneous data : uby_ema_tick() uby_ema_time() uby_ems_tick() uby_ems_time() uby_emmin_tick() uby_emmin_time() uby_emmax_tick() uby_emmax_time() uby_emstd_tick() uby_emstd_time() arguments on_null on_nan can take following values: 'poison': Allow bad data poison result, meaning calculation involving least one NaN yield NaN. valid use NaN. 'reset': Reset state bucket NULL invalid data encountered. 'skip': Skip process invalid data without changing state. 'throw': Throw exception abort processing bad data encountered. argument big_value_context can take following values: 'decimal128': IEEE 754R Decimal128 format. 34 digits rounding half-even. 'decimal32': IEEE 754R Decimal32 format. 7 digits rounding half-even. 'decimal64': IEEE 754R Decimal64 format. 16 digits rounding half-even. 'unlimited': Unlimited precision arithmetic. Rounding half-. function generator function. , output another function called OperationControl intended used call one uby functions. detail typically hidden user. However, important understand detail debugging purposes, output call op_control() can otherwise seem unexpected.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/op_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handling special values in some UpdateBy operations — op_control","text":"","code":"print(\"hello!\") #> [1] \"hello!\""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative maximum of specified columns by group — uby_cum_max","title":"Cumulative maximum of specified columns by group — uby_cum_max","text":"Creates cumulative maximum UpdateByOp computes cumulative maximum column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative maximum of specified columns by group — uby_cum_max","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute cumulative maximum non-grouping columns.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative maximum of specified columns by group — uby_cum_max","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative maximum of specified columns by group — uby_cum_max","text":"function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative maximum of specified columns by group — uby_cum_max","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute cumulative maximum of col1 and col2 th1 <- th$   update_by(uby_cum_max(c(\"col1CumMax = col1\", \"col2CumMax = col2\")))  # compute cumulative maximum of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_cum_max(c(\"col1CumMax = col1\", \"col2CumMax = col2\")), by = \"boolCol\")  # compute cumulative maximum of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_cum_max(c(\"col1CumMax = col1\", \"col2CumMax = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_min.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative minimum of specified columns by group — uby_cum_min","title":"Cumulative minimum of specified columns by group — uby_cum_min","text":"Creates cumulative minimum UpdateByOp computes cumulative minimum column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative minimum of specified columns by group — uby_cum_min","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute cumulative minimum non-grouping columns.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_min.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative minimum of specified columns by group — uby_cum_min","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_min.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative minimum of specified columns by group — uby_cum_min","text":"function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_min.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative minimum of specified columns by group — uby_cum_min","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute cumulative minimum of col1 and col2 th1 <- th$   update_by(uby_cum_min(c(\"col1CumMin = col1\", \"col2CumMin = col2\")))  # compute cumulative minimum of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_cum_min(c(\"col1CumMin = col1\", \"col2CumMin = col2\")), by = \"boolCol\")  # compute cumulative minimum of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_cum_min(c(\"col1CumMin = col1\", \"col2CumMin = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_prod.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative product of specified columns by group — uby_cum_prod","title":"Cumulative product of specified columns by group — uby_cum_prod","text":"Creates cumulative product UpdateByOp computes cumulative product column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_prod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative product of specified columns by group — uby_cum_prod","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute cumulative product non-grouping columns.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_prod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative product of specified columns by group — uby_cum_prod","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_prod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative product of specified columns by group — uby_cum_prod","text":"function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_prod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative product of specified columns by group — uby_cum_prod","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute cumulative product of col1 and col2 th1 <- th$   update_by(uby_cum_prod(c(\"col1CumProd = col1\", \"col2CumProd = col2\")))  # compute cumulative product of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_cum_prod(c(\"col1CumProd = col1\", \"col2CumProd = col2\")), by = \"boolCol\")  # compute cumulative product of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_cum_prod(c(\"col1CumProd = col1\", \"col2CumProd = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative sum of specified columns by group — uby_cum_sum","title":"Cumulative sum of specified columns by group — uby_cum_sum","text":"Creates cumulative sum UpdateByOp computes cumulative sum column cols aggregation group.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative sum of specified columns by group — uby_cum_sum","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute cumulative sum non-grouping columns.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative sum of specified columns by group — uby_cum_sum","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_sum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cumulative sum of specified columns by group — uby_cum_sum","text":"function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_cum_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative sum of specified columns by group — uby_cum_sum","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute cumulative sum of col1 and col2 th1 <- th$   update_by(uby_cum_sum(c(\"col1CumSum = col1\", \"col2CumSum = col2\")))  # compute cumulative sum of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_cum_sum(c(\"col1CumSum = col1\", \"col2CumSum = col2\")), by = \"boolCol\")  # compute cumulative sum of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_cum_sum(c(\"col1CumSum = col1\", \"col2CumSum = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Row-wise difference by group — uby_delta","title":"Row-wise difference by group — uby_delta","text":"Creates delta UpdateByOp column cols. Delta operation computes difference current value previous value. current value null, operation output null. current value valid, output depend delta_control provided.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row-wise difference by group — uby_delta","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default apply delta operation non-grouping columns. delta_control Defines delta operation handles null values. Defaults 'null_dominates'.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row-wise difference by group — uby_delta","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_delta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Row-wise difference by group — uby_delta","text":"delta_control parameter controls operation treats null values. can one following: 'null_dominates': valid value following null value returns null. 'value_dominates': valid value following null value returns valid value. 'zero_dominates': valid value following null value returns zero. function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_delta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row-wise difference by group — uby_delta","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute consecutive differences of col1 and col2 th1 <- th$   update_by(uby_delta(c(\"col1Delta = col1\", \"col2Delta = col2\")))  # compute consecutive differences of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_delta(c(\"col1Delta = col1\", \"col2Delta = col2\")), by = \"boolCol\")  # compute consecutive differences of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_delta(c(\"col1Delta = col1\", \"col2Delta = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving average by group with ticks as the decay unit — uby_ema_tick","title":"Exponential moving average by group with ticks as the decay unit — uby_ema_tick","text":"Creates exponential moving average (EMA) UpdateByOp column cols, using ticks decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving average by group with ticks as the decay unit — uby_ema_tick","text":"decay_ticks Numeric scalar denoting decay rate ticks. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving average non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving average by group with ticks as the decay unit — uby_ema_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving average by group with ticks as the decay unit — uby_ema_tick","text":"formula used $$= e^{\\frac{-1}{\\tau}}$$ $$\\bar{x}_0 = x_0$$ $$\\bar{x}_i = *\\bar{x}_{-1} + (1-)*x_i$$ : \\(\\tau\\) decay_ticks, input parameter method. \\(\\bar{x}_i\\) exponential moving average column \\(X\\) step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving average by group with ticks as the decay unit — uby_ema_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-row exponential moving average of col1 and col2 th1 <- th$   update_by(uby_ema_tick(decay_ticks = 10, cols = c(\"col1Ema = col1\", \"col2Ema = col2\")))  # compute 5-row exponential moving average of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_ema_tick(decay_ticks = 5, cols = c(\"col1Ema = col1\", \"col2Ema = col2\")), by = \"boolCol\")  # compute 20-row exponential moving average of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_ema_tick(decay_ticks = 20, cols = c(\"col1Ema = col1\", \"col2Ema = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving average by group with time as the decay unit — uby_ema_time","title":"Exponential moving average by group with time as the decay unit — uby_ema_time","text":"Creates exponential moving average (EMA) UpdateByOp column cols, using time decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving average by group with time as the decay unit — uby_ema_time","text":"ts_col String denoting column use timestamp. decay_time ISO-8601-formatted duration string specifying decay rate. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving average non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving average by group with time as the decay unit — uby_ema_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving average by group with time as the decay unit — uby_ema_time","text":"formula used $$a_i = e^{\\frac{-dt_i}{\\tau}}$$ $$\\bar{x}_0 = x_0$$ $$\\bar{x}_i = a_i*\\bar{x}_{-1} + (1-a_i)*x_i$$ : \\(dt_i\\) difference time \\(t_i\\) \\(t_{-1}\\) nanoseconds. \\(\\tau\\) decay_time nanoseconds, input parameter method. \\(\\bar{x}_i\\) exponential moving average column \\(X\\) time step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ema_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving average by group with time as the decay unit — uby_ema_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-second exponential moving average of col1 and col2 th1 <- th$   update_by(uby_ema_time(ts_col = \"timeCol\", decay_time = \"PT10s\", cols = c(\"col1Ema = col1\", \"col2Ema = col2\")))  # compute 5-second exponential moving average of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_ema_time(ts_col = \"timeCol\", decay_time = \"PT5s\", cols = c(\"col1Ema = col1\", \"col2Ema = col2\")), by = \"boolCol\")  # compute 20-second exponential moving average of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_ema_time(ts_col = \"timeCol\", decay_time = \"PT20s\", cols = c(\"col1Ema = col1\", \"col2Ema = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving maximum by group with ticks as the decay unit — uby_emmax_tick","title":"Exponential moving maximum by group with ticks as the decay unit — uby_emmax_tick","text":"Creates exponential moving maximum (EMMAX) UpdateByOp column cols, using ticks decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving maximum by group with ticks as the decay unit — uby_emmax_tick","text":"decay_ticks Numeric scalar denoting decay rate ticks. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving maximum non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving maximum by group with ticks as the decay unit — uby_emmax_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving maximum by group with ticks as the decay unit — uby_emmax_tick","text":"formula used $$= e^{\\frac{-1}{\\tau}}$$ $$\\max_0(X) = x_0$$ $$\\max_i(X) = \\max(*\\max_{-1}(X), \\; x_i)$$ : \\(\\tau\\) decay_ticks, input parameter method. \\(\\max_i(X)\\) exponential moving maximum column \\(X\\) step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving maximum by group with ticks as the decay unit — uby_emmax_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-row exponential moving maximum of col1 and col2 th1 <- th$   update_by(uby_emmax_tick(decay_ticks = 10, cols = c(\"col1Emmax = col1\", \"col2Emmax = col2\")))  # compute 5-row exponential moving maximum of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_emmax_tick(decay_ticks = 5, cols = c(\"col1Emmax = col1\", \"col2Emmax = col2\")), by = \"boolCol\")  # compute 20-row exponential moving maximum of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_emmax_tick(decay_ticks = 20, cols = c(\"col1Emmax = col1\", \"col2Emmax = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving maximum by group with time as the decay unit — uby_emmax_time","title":"Exponential moving maximum by group with time as the decay unit — uby_emmax_time","text":"Creates exponential moving maximum (EMMAX) UpdateByOp column cols, using time decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving maximum by group with time as the decay unit — uby_emmax_time","text":"decay_time ISO-8601-formatted duration string specifying decay rate. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving maximum non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving maximum by group with time as the decay unit — uby_emmax_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving maximum by group with time as the decay unit — uby_emmax_time","text":"formula used $$a_i = e^{\\frac{-dt_i}{\\tau}}$$ $$\\max_0(X) = x_0$$ $$\\max_i(X) = \\max(*\\max_{-1}(X), \\; x_i)$$ : \\(dt_i\\) difference time \\(t_i\\) \\(t_{-1}\\) nanoseconds. \\(\\tau\\) decay_time nanoseconds, input parameter method. \\(\\max_i(X)\\) exponential moving maximum column \\(X\\) time step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmax_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving maximum by group with time as the decay unit — uby_emmax_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-second exponential moving maximum of col1 and col2 th1 <- th$   update_by(uby_emmax_time(ts_col = \"timeCol\", decay_time = \"PT10s\", cols = c(\"col1Emmax = col1\", \"col2Emmax = col2\")))  # compute 5-second exponential moving maximum of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_emmax_time(ts_col = \"timeCol\", decay_time = \"PT5s\", cols = c(\"col1Emmax = col1\", \"col2Emmax = col2\")), by = \"boolCol\")  # compute 20-second exponential moving maximum of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_emmax_time(ts_col = \"timeCol\", decay_time = \"PT20s\", cols = c(\"col1Emmax = col1\", \"col2Emmax = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving minimum by group with ticks as the decay unit — uby_emmin_tick","title":"Exponential moving minimum by group with ticks as the decay unit — uby_emmin_tick","text":"Creates exponential moving minimum (EMMIN) UpdateByOp column cols, using ticks decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving minimum by group with ticks as the decay unit — uby_emmin_tick","text":"decay_ticks Numeric scalar denoting decay rate ticks. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving minimum non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving minimum by group with ticks as the decay unit — uby_emmin_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving minimum by group with ticks as the decay unit — uby_emmin_tick","text":"formula used $$= e^{\\frac{-1}{\\tau}}$$ $$\\min_0(X) = x_0$$ $$\\min_i(X) = \\min(*\\min_{-1}(X), \\; x_i)$$ : \\(\\tau\\) decay_ticks, input parameter method. \\(\\min_i(X)\\) exponential moving minimum column \\(X\\) step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving minimum by group with ticks as the decay unit — uby_emmin_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-row exponential moving minimum of col1 and col2 th1 <- th$   update_by(uby_emmin_tick(decay_ticks = 10, cols = c(\"col1Emmin = col1\", \"col2Emmin = col2\")))  # compute 5-row exponential moving minimum of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_emmin_tick(decay_ticks = 5, cols = c(\"col1Emmin = col1\", \"col2Emmin = col2\")), by = \"boolCol\")  # compute 20-row exponential moving minimum of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_emmin_tick(decay_ticks = 20, cols = c(\"col1Emmin = col1\", \"col2Emmin = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving minimum by group with time as the decay unit — uby_emmin_time","title":"Exponential moving minimum by group with time as the decay unit — uby_emmin_time","text":"Creates exponential moving minimum (EMMIN) UpdateByOp column cols, using time decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving minimum by group with time as the decay unit — uby_emmin_time","text":"decay_time ISO-8601-formatted duration string specifying decay rate. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving minimum non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving minimum by group with time as the decay unit — uby_emmin_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving minimum by group with time as the decay unit — uby_emmin_time","text":"formula used $$a_i = e^{\\frac{-dt_i}{\\tau}}$$ $$\\min_0(X) = x_0$$ $$\\min_i(X) = \\min(*\\min_{-1}(X), \\; x_i)$$ : \\(dt_i\\) difference time \\(t_i\\) \\(t_{-1}\\) nanoseconds. \\(\\tau\\) decay_time nanoseconds, input parameter method. \\(\\min_i(X)\\) exponential moving minimum column \\(X\\) step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emmin_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving minimum by group with time as the decay unit — uby_emmin_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-second exponential moving minimum of col1 and col2 th1 <- th$   update_by(uby_emmin_time(ts_col = \"timeCol\", decay_time = \"PT10s\", cols = c(\"col1Emmin = col1\", \"col2Emmin = col2\")))  # compute 5-second exponential moving minimum of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_emmin_time(ts_col = \"timeCol\", decay_time = \"PT5s\", cols = c(\"col1Emmin = col1\", \"col2Emmin = col2\")), by = \"boolCol\")  # compute 20-second exponential moving minimum of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_emmin_time(ts_col = \"timeCol\", decay_time = \"PT20s\", cols = c(\"col1Emmin = col1\", \"col2Emmin = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving sum by group with ticks as the decay unit — uby_ems_tick","title":"Exponential moving sum by group with ticks as the decay unit — uby_ems_tick","text":"Creates exponential moving sum (EMS) UpdateByOp column cols, using ticks decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving sum by group with ticks as the decay unit — uby_ems_tick","text":"decay_ticks Numeric scalar denoting decay rate ticks. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving sum non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving sum by group with ticks as the decay unit — uby_ems_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving sum by group with ticks as the decay unit — uby_ems_tick","text":"formula used $$= e^{\\frac{-1}{\\tau}}$$ $$\\mathcal{S}_0 = x_0$$ $$\\mathcal{S}_i = *\\mathcal{S}_{-1} + x_i$$ : \\(\\tau\\) decay_ticks, input parameter method. \\(\\mathcal{S}_i\\) exponential moving sum column \\(X\\) step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving sum by group with ticks as the decay unit — uby_ems_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-row exponential moving sum of col1 and col2 th1 <- th$   update_by(uby_ems_tick(decay_ticks = 10, cols = c(\"col1Ems = col1\", \"col2Ems = col2\")))  # compute 5-row exponential moving sum of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_ems_tick(decay_ticks = 5, cols = c(\"col1Ems = col1\", \"col2Ems = col2\")), by = \"boolCol\")  # compute 20-row exponential moving sum of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_ems_tick(decay_ticks = 20, cols = c(\"col1Ems = col1\", \"col2Ems = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving sum by group with time as the decay unit — uby_ems_time","title":"Exponential moving sum by group with time as the decay unit — uby_ems_time","text":"Creates exponential moving sum (EMS) UpdateByOp column cols, using time decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving sum by group with time as the decay unit — uby_ems_time","text":"decay_time ISO-8601-formatted duration string specifying decay rate. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving sum non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving sum by group with time as the decay unit — uby_ems_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving sum by group with time as the decay unit — uby_ems_time","text":"formula used $$a_i = e^{\\frac{-dt_i}{\\tau}}$$ $$\\mathcal{S}_0 = x_0$$ $$\\mathcal{S}_i = a_i*\\mathcal{S}_{-1} + x_i$$ : \\(dt_i\\) difference time \\(t_i\\) \\(t_{-1}\\) nanoseconds. \\(\\tau\\) decay_time nanoseconds, input parameter method. \\(\\mathcal{S}_i\\) exponential moving sum column \\(X\\) time step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_ems_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving sum by group with time as the decay unit — uby_ems_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-second exponential moving sum of col1 and col2 th1 <- th$   update_by(uby_ems_time(ts_col = \"timeCol\", decay_time = \"PT10s\", cols = c(\"col1Ems = col1\", \"col2Ems = col2\")))  # compute 5-second exponential moving sum of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_ems_time(ts_col = \"timeCol\", decay_time = \"PT5s\", cols = c(\"col1Ems = col1\", \"col2Ems = col2\")), by = \"boolCol\")  # compute 20-second exponential moving sum of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_ems_time(ts_col = \"timeCol\", decay_time = \"PT20s\", cols = c(\"col1Ems = col1\", \"col2Ems = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving standard deviation by group with ticks as the decay unit — uby_emstd_tick","title":"Exponential moving standard deviation by group with ticks as the decay unit — uby_emstd_tick","text":"Creates exponential moving standard deviation (EMSTD) UpdateByOp column cols, using ticks decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving standard deviation by group with ticks as the decay unit — uby_emstd_tick","text":"decay_ticks Numeric scalar denoting decay rate ticks. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving standard deviation non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving standard deviation by group with ticks as the decay unit — uby_emstd_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving standard deviation by group with ticks as the decay unit — uby_emstd_tick","text":"formula used $$= e^{\\frac{-1}{\\tau}}$$ $$s^2_0 = 0$$ $$s^2_i = *(s^2_{-1} + (1-)*(x_i - \\bar{x}_{-1})^2)$$ $$s_i = \\sqrt{s^2_i}$$ : \\(\\tau\\) decay_ticks, input parameter method. \\(\\bar{x}_i\\) exponential moving average column \\(X\\) step \\(\\). \\(s_i\\) exponential moving standard deviation column \\(X\\) step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). Note formula, \\(s^2_0 = 0\\) yields correct results subsequent calculations. However, sample variance fewer two data points undefined, first element EMSTD calculation always NaN. function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving standard deviation by group with ticks as the decay unit — uby_emstd_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-row exponential moving standard deviation of col1 and col2 th1 <- th$   update_by(uby_emstd_tick(decay_ticks = 10, cols = c(\"col1Emstd = col1\", \"col2Emstd = col2\")))  # compute 5-row exponential moving standard deviation of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_emstd_tick(decay_ticks = 5, cols = c(\"col1Emstd = col1\", \"col2Emstd = col2\")), by = \"boolCol\")  # compute 20-row exponential moving standard deviation of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_emstd_tick(decay_ticks = 20, cols = c(\"col1Emstd = col1\", \"col2Emstd = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential moving standard deviation by group with time as the decay unit — uby_emstd_time","title":"Exponential moving standard deviation by group with time as the decay unit — uby_emstd_time","text":"Creates exponential moving standard deviation (EMSTD) UpdateByOp column cols, using time decay unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential moving standard deviation by group with time as the decay unit — uby_emstd_time","text":"decay_time ISO-8601-formatted duration string specifying decay rate. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute exponential moving standard deviation non-grouping columns. operation_control OperationControl defines special cases behave. See ?op_control information.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential moving standard deviation by group with time as the decay unit — uby_emstd_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exponential moving standard deviation by group with time as the decay unit — uby_emstd_time","text":"formula used $$a_i = e^{\\frac{-dt_i}{\\tau}}$$ $$s^2_0 = 0$$ $$s^2_i = a_i*(s^2_{-1} + (1-a_i)*(x_i - \\bar{x}_{-1})^2)$$ $$s_i = \\sqrt{s^2_i}$$ : \\(dt_i\\) difference time \\(t_i\\) \\(t_{-1}\\) nanoseconds. \\(\\tau\\) decay_time nanoseconds, input parameter method. \\(\\bar{x}_i\\) exponential moving average column \\(X\\) step \\(\\). \\(s_i\\) exponential moving standard deviation column \\(X\\) time step \\(\\). \\(x_i\\) current value. \\(\\) denotes time step, ranging \\(=1\\) \\(= n-1\\), \\(n\\) number elements \\(X\\). Note formula, \\(s^2_0 = 0\\) yields correct results subsequent calculations. However, sample variance fewer two data points undefined, first element EMSTD calculation always NaN. function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_emstd_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exponential moving standard deviation by group with time as the decay unit — uby_emstd_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute 10-second exponential moving standard deviation of col1 and col2 th1 <- th$   update_by(uby_emstd_time(ts_col = \"timeCol\", decay_time = \"PT10s\", cols = c(\"col1Emstd = col1\", \"col2Emstd = col2\")))  # compute 5-second exponential moving standard deviation of col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_emstd_time(ts_col = \"timeCol\", decay_time = \"PT5s\", cols = c(\"col1Emstd = col1\", \"col2Emstd = col2\")), by = \"boolCol\")  # compute 20-second exponential moving standard deviation of col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_emstd_time(ts_col = \"timeCol\", decay_time = \"PT20s\", cols = c(\"col1Emstd = col1\", \"col2Emstd = col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_forward_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace null values with the last known non-null value — uby_forward_fill","title":"Replace null values with the last known non-null value — uby_forward_fill","text":"Creates forward fill UpdateByOp replaces null values cols last known non-null values. operation forward .","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_forward_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace null values with the last known non-null value — uby_forward_fill","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default perform forward fill non-grouping columns.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_forward_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace null values with the last known non-null value — uby_forward_fill","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_forward_fill.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace null values with the last known non-null value — uby_forward_fill","text":"function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_forward_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace null values with the last known non-null value — uby_forward_fill","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = replace(sample(10000, size = 500, replace = TRUE), sample(500, 100), NA),   col2 = replace(sample(10000, size = 500, replace = TRUE), sample(500, 100), NA),   col3 = replace(1:500, sample(500, 100), NA) ) th <- client$import_table(df)  # forward fill col1 and col2 th1 <- th$   update_by(uby_forward_fill(c(\"col1\", \"col2\")))  # forward fill col1 and col2, grouped by boolCol th2 <- th$   update_by(uby_forward_fill(c(\"col1\", \"col2\")), by = \"boolCol\")  # forward fill col3, compute parity of col3, and forward fill col1 and col2, grouped by boolCol and parity of col3 th3 <- th$   update_by(uby_forward_fill(\"col3\"))$   update(\"col3Parity = col3 % 2\")$   update_by(uby_forward_fill(c(\"col1\", \"col2\")), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling average with ticks as the windowing unit — uby_rolling_avg_tick","title":"Rolling average with ticks as the windowing unit — uby_rolling_avg_tick","text":"Creates simple moving average (SMA) UpdateByOp column cols, using ticks windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling average with ticks as the windowing unit — uby_rolling_avg_tick","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling average non-grouping columns. rev_ticks Integer scalar denoting look-behind window size number rows. fwd_ticks Integer scalar denoting look-ahead window size number rows. Default 0.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling average with ticks as the windowing unit — uby_rolling_avg_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling average with ticks as the windowing unit — uby_rolling_avg_tick","text":"Ticks row counts, may specify reverse forward window number rows include. current row considered belong reverse window forward window. Also, negative values allowed can used generate completely forward completely reverse windows. examples window values: rev_ticks = 1, fwd_ticks = 0 - contains current row rev_ticks = 10, fwd_ticks = 0 - contains 9 previous rows current row rev_ticks = 0, fwd_ticks = 10 - contains following 10 rows, excludes current row rev_ticks = 10, fwd_ticks = 10 - contains previous 9 rows, current row 10 rows following rev_ticks = 10, fwd_ticks = -5 - contains 5 rows, beginning 9 rows , ending 5 rows current row (inclusive) rev_ticks = 11, fwd_ticks = -1 - contains 10 rows, beginning 10 rows , ending 1 row current row (inclusive) rev_ticks = -5, fwd_ticks = 10 - contains 5 rows, beginning 5 rows following, ending 10 rows following current row (inclusive) function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling average with ticks as the windowing unit — uby_rolling_avg_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling average of col1 and col2, using the previous 5 rows and current row th1 <- th$   update_by(uby_rolling_avg_tick(cols = c(\"col1RollAvg = col1\", \"col2RollAvg = col2\"), rev_ticks = 6))  # compute rolling average of col1 and col2, grouped by boolCol, using previous 5 rows, current row, and following 5 rows th2 <- th$   update_by(uby_rolling_avg_tick(cols = c(\"col1RollAvg = col1\", \"col2RollAvg = col2\"), rev_ticks = 6, fwd_ticks = 5), by = \"boolCol\")  # compute rolling average of col1 and col2, grouped by boolCol and parity of col3, using current row and following 10 rows th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_avg_tick(cols = c(\"col1RollAvg = col1\", \"col2RollAvg = col2\"), rev_ticks = 1, fwd_ticks = 10), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling average with time as the windowing unit — uby_rolling_avg_time","title":"Rolling average with time as the windowing unit — uby_rolling_avg_time","text":"Creates simple moving average (SMA) UpdateByOp column cols, using time windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling average with time as the windowing unit — uby_rolling_avg_time","text":"ts_col String denoting column use timestamp. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling average non-grouping columns. rev_time ISO-8601-formatted string specifying look-behind window size. fwd_time ISO-8601-formatted string specifying look-ahead window size. Default 0 seconds.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling average with time as the windowing unit — uby_rolling_avg_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling average with time as the windowing unit — uby_rolling_avg_time","text":"uses ISO-8601 time strings reverse forward window parameters. Negative values allowed can used generate completely forward completely reverse windows. row containing null value timestamp column belongs window considered windows rows; output null. examples window values: rev_time = \"PT00:10:00\", fwd_time = \"PT00:10:00\" - contains rows 10m 10m following current row timestamp (inclusive) rev_time = \"PT00:10:00\", fwd_time = \"-PT00:05:00\" - contains rows 10m 5m current row timestamp (inclusive), purely backwards looking window rev_time = \"-PT00:05:00\", fwd_time = \"PT00:10:00\" - contains rows 5m following 10m following current row timestamp (inclusive), purely forwards looking window function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_avg_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling average with time as the windowing unit — uby_rolling_avg_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling average of col1 and col2, using the previous 5 seconds th1 <- th$   update_by(uby_rolling_avg_time(ts_col = \"timeCol\", cols = c(\"col1RollAvg = col1\", \"col2RollAvg = col2\"), rev_time = \"PT5s\"))  # compute rolling average of col1 and col2, grouped by boolCol, using previous 5 seconds, and following 5 seconds th2 <- th$   update_by(uby_rolling_avg_time(ts_col = \"timeCol\", cols = c(\"col1RollAvg = col1\", \"col2RollAvg = col2\"), rev_time = \"PT5s\", fwd_ticks = \"PT5s\"), by = \"boolCol\")  # compute rolling average of col1 and col2, grouped by boolCol and parity of col3, using following 10 seconds th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_avg_time(ts_col = \"timeCol\", cols = c(\"col1RollAvg = col1\", \"col2RollAvg = col2\"), rev_time = \"PT0s\", fwd_time = \"PT10s\"), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling count with ticks as the windowing unit — uby_rolling_count_tick","title":"Rolling count with ticks as the windowing unit — uby_rolling_count_tick","text":"Creates rolling count UpdateByOp column cols, using ticks windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling count with ticks as the windowing unit — uby_rolling_count_tick","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling count non-grouping columns. rev_ticks Integer scalar denoting look-behind window size number rows. fwd_ticks Integer scalar denoting look-ahead window size number rows. Default 0.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling count with ticks as the windowing unit — uby_rolling_count_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling count with ticks as the windowing unit — uby_rolling_count_tick","text":"Ticks row counts, may specify reverse forward window number rows include. current row considered belong reverse window forward window. Also, negative values allowed can used generate completely forward completely reverse windows. examples window values: rev_ticks = 1, fwd_ticks = 0 - contains current row rev_ticks = 10, fwd_ticks = 0 - contains 9 previous rows current row rev_ticks = 0, fwd_ticks = 10 - contains following 10 rows, excludes current row rev_ticks = 10, fwd_ticks = 10 - contains previous 9 rows, current row 10 rows following rev_ticks = 10, fwd_ticks = -5 - contains 5 rows, beginning 9 rows , ending 5 rows current row (inclusive) rev_ticks = 11, fwd_ticks = -1 - contains 10 rows, beginning 10 rows , ending 1 row current row (inclusive) rev_ticks = -5, fwd_ticks = 10 - contains 5 rows, beginning 5 rows following, ending 10 rows following current row (inclusive) function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling count with ticks as the windowing unit — uby_rolling_count_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling count of col1 and col2, using the previous 5 rows and current row th1 <- th$   update_by(uby_rolling_count_tick(cols = c(\"col1RollCount = col1\", \"col2RollCount = col2\"), rev_ticks = 6))  # compute rolling count of col1 and col2, grouped by boolCol, using previous 5 rows, current row, and following 5 rows th2 <- th$   update_by(uby_rolling_count_tick(cols = c(\"col1RollCount = col1\", \"col2RollCount = col2\"), rev_ticks = 6, fwd_ticks = 5), by = \"boolCol\")  # compute rolling count of col1 and col2, grouped by boolCol and parity of col3, using current row and following 10 rows th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_count_tick(cols = c(\"col1RollCount = col1\", \"col2RollCount = col2\"), rev_ticks = 1, fwd_ticks = 10), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling count with time as the windowing unit — uby_rolling_count_time","title":"Rolling count with time as the windowing unit — uby_rolling_count_time","text":"Creates rolling count UpdateByOp column cols, using time windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling count with time as the windowing unit — uby_rolling_count_time","text":"ts_col String denoting column use timestamp. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling count non-grouping columns. rev_time ISO-8601-formatted string specifying look-behind window size. fwd_time ISO-8601-formatted string specifying look-ahead window size. Default 0 seconds.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling count with time as the windowing unit — uby_rolling_count_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling count with time as the windowing unit — uby_rolling_count_time","text":"uses ISO-8601 time strings reverse forward window parameters. Negative values allowed can used generate completely forward completely reverse windows. row containing null value timestamp column belongs window considered windows rows; output null. examples window values: rev_time = \"PT00:10:00\", fwd_time = \"PT00:10:00\" - contains rows 10m 10m following current row timestamp (inclusive) rev_time = \"PT00:10:00\", fwd_time = \"-PT00:05:00\" - contains rows 10m 5m current row timestamp (inclusive), purely backwards looking window rev_time = \"-PT00:05:00\", fwd_time = \"PT00:10:00\" - contains rows 5m following 10m following current row timestamp (inclusive), purely forwards looking window function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_count_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling count with time as the windowing unit — uby_rolling_count_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling count of col1 and col2, using the previous 5 seconds th1 <- th$   update_by(uby_rolling_count_time(ts_col = \"timeCol\", cols = c(\"col1RollCount = col1\", \"col2RollCount = col2\"), rev_time = \"PT5s\"))  # compute rolling count of col1 and col2, grouped by boolCol, using previous 5 seconds, and following 5 seconds th2 <- th$   update_by(uby_rolling_count_time(ts_col = \"timeCol\", cols = c(\"col1RollCount = col1\", \"col2RollCount = col2\"), rev_time = \"PT5s\", fwd_ticks = \"PT5s\"), by = \"boolCol\")  # compute rolling count of col1 and col2, grouped by boolCol and parity of col3, using following 10 seconds th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_count_time(ts_col = \"timeCol\", cols = c(\"col1RollCount = col1\", \"col2RollCount = col2\"), rev_time = \"PT0s\", fwd_time = \"PT10s\"), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling grouping with ticks as the windowing unit — uby_rolling_group_tick","title":"Rolling grouping with ticks as the windowing unit — uby_rolling_group_tick","text":"Creates rolling group UpdateByOp column cols, using ticks windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling grouping with ticks as the windowing unit — uby_rolling_group_tick","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling group non-grouping columns. rev_ticks Integer scalar denoting look-behind window size number rows. fwd_ticks Integer scalar denoting look-ahead window size number rows. Default 0.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling grouping with ticks as the windowing unit — uby_rolling_group_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling grouping with ticks as the windowing unit — uby_rolling_group_tick","text":"Ticks row counts, may specify reverse forward window number rows include. current row considered belong reverse window forward window. Also, negative values allowed can used generate completely forward completely reverse windows. examples window values: rev_ticks = 1, fwd_ticks = 0 - contains current row rev_ticks = 10, fwd_ticks = 0 - contains 9 previous rows current row rev_ticks = 0, fwd_ticks = 10 - contains following 10 rows, excludes current row rev_ticks = 10, fwd_ticks = 10 - contains previous 9 rows, current row 10 rows following rev_ticks = 10, fwd_ticks = -5 - contains 5 rows, beginning 9 rows , ending 5 rows current row (inclusive) rev_ticks = 11, fwd_ticks = -1 - contains 10 rows, beginning 10 rows , ending 1 row current row (inclusive) rev_ticks = -5, fwd_ticks = 10 - contains 5 rows, beginning 5 rows following, ending 10 rows following current row (inclusive) function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling grouping with ticks as the windowing unit — uby_rolling_group_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling group of col1 and col2, grouped by boolCol, using previous 5 rows, current row, and following 5 rows th1 <- th$   update_by(uby_rolling_group_tick(cols = c(\"col1RollGroup = col1\", \"col2RollGroup = col2\"), rev_ticks = 6, fwd_ticks = 5), by = \"boolCol\")  # compute rolling group of col1 and col2, grouped by boolCol and parity of col3, using current row and following 10 rows th2 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_group_tick(cols = c(\"col1RollGroup = col1\", \"col2RollGroup = col2\"), rev_ticks = 1, fwd_ticks = 10), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling grouping with time as the windowing unit — uby_rolling_group_time","title":"Rolling grouping with time as the windowing unit — uby_rolling_group_time","text":"Creates rolling group UpdateByOp column cols, using time windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling grouping with time as the windowing unit — uby_rolling_group_time","text":"ts_col String denoting column use timestamp. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling group non-grouping columns. rev_time ISO-8601-formatted string specifying look-behind window size. fwd_time ISO-8601-formatted string specifying look-ahead window size. Default 0 seconds.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling grouping with time as the windowing unit — uby_rolling_group_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling grouping with time as the windowing unit — uby_rolling_group_time","text":"uses ISO-8601 time strings reverse forward window parameters. Negative values allowed can used generate completely forward completely reverse windows. row containing null value timestamp column belongs window considered windows rows; output null. examples window values: rev_time = \"PT00:10:00\", fwd_time = \"PT00:10:00\" - contains rows 10m 10m following current row timestamp (inclusive) rev_time = \"PT00:10:00\", fwd_time = \"-PT00:05:00\" - contains rows 10m 5m current row timestamp (inclusive), purely backwards looking window rev_time = \"-PT00:05:00\", fwd_time = \"PT00:10:00\" - contains rows 5m following 10m following current row timestamp (inclusive), purely forwards looking window function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_group_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling grouping with time as the windowing unit — uby_rolling_group_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling group of col1 and col2, grouped by boolCol, using previous 5 seconds, and following 5 seconds th1 <- th$   update_by(uby_rolling_group_time(ts_col = \"timeCol\", cols = c(\"col1RollGroup = col1\", \"col2RollGroup = col2\"), rev_time = \"PT5s\", fwd_ticks = \"PT5s\"), by = \"boolCol\")  # compute rolling group of col1 and col2, grouped by boolCol and parity of col3, using following 10 seconds th2 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_group_time(ts_col = \"timeCol\", cols = c(\"col1RollGroup = col1\", \"col2RollGroup = col2\"), rev_time = \"PT0s\", fwd_time = \"PT10s\"), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling maximum with ticks as the windowing unit — uby_rolling_max_tick","title":"Rolling maximum with ticks as the windowing unit — uby_rolling_max_tick","text":"Creates rolling maximum UpdateByOp column cols, using ticks windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling maximum with ticks as the windowing unit — uby_rolling_max_tick","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling maximum non-grouping columns. rev_ticks Integer scalar denoting look-behind window size number rows. fwd_ticks Integer scalar denoting look-ahead window size number rows. Default 0.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling maximum with ticks as the windowing unit — uby_rolling_max_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling maximum with ticks as the windowing unit — uby_rolling_max_tick","text":"Ticks row counts, may specify reverse forward window number rows include. current row considered belong reverse window forward window. Also, negative values allowed can used generate completely forward completely reverse windows. examples window values: rev_ticks = 1, fwd_ticks = 0 - contains current row rev_ticks = 10, fwd_ticks = 0 - contains 9 previous rows current row rev_ticks = 0, fwd_ticks = 10 - contains following 10 rows, excludes current row rev_ticks = 10, fwd_ticks = 10 - contains previous 9 rows, current row 10 rows following rev_ticks = 10, fwd_ticks = -5 - contains 5 rows, beginning 9 rows , ending 5 rows current row (inclusive) rev_ticks = 11, fwd_ticks = -1 - contains 10 rows, beginning 10 rows , ending 1 row current row (inclusive) rev_ticks = -5, fwd_ticks = 10 - contains 5 rows, beginning 5 rows following, ending 10 rows following current row (inclusive) function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling maximum with ticks as the windowing unit — uby_rolling_max_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling maximum of col1 and col2, using the previous 5 rows and current row th1 <- th$   update_by(uby_rolling_max_tick(cols = c(\"col1RollMax = col1\", \"col2RollMax = col2\"), rev_ticks = 6))  # compute rolling maximum of col1 and col2, grouped by boolCol, using previous 5 rows, current row, and following 5 rows th2 <- th$   update_by(uby_rolling_max_tick(cols = c(\"col1RollMax = col1\", \"col2RollMax = col2\"), rev_ticks = 6, fwd_ticks = 5), by = \"boolCol\")  # compute rolling maximum of col1 and col2, grouped by boolCol and parity of col3, using current row and following 10 rows th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_max_tick(cols = c(\"col1RollMax = col1\", \"col2RollMax = col2\"), rev_ticks = 1, fwd_ticks = 10), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling maximum with time as the windowing unit — uby_rolling_max_time","title":"Rolling maximum with time as the windowing unit — uby_rolling_max_time","text":"Creates rolling maximum UpdateByOp column cols, using time windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling maximum with time as the windowing unit — uby_rolling_max_time","text":"ts_col String denoting column use timestamp. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling maximum non-grouping columns. rev_time ISO-8601-formatted string specifying look-behind window size. fwd_time ISO-8601-formatted string specifying look-ahead window size. Default 0 seconds.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling maximum with time as the windowing unit — uby_rolling_max_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling maximum with time as the windowing unit — uby_rolling_max_time","text":"uses ISO-8601 time strings reverse forward window parameters. Negative values allowed can used generate completely forward completely reverse windows. row containing null value timestamp column belongs window considered windows rows; output null. examples window values: rev_time = \"PT00:10:00\", fwd_time = \"PT00:10:00\" - contains rows 10m 10m following current row timestamp (inclusive) rev_time = \"PT00:10:00\", fwd_time = \"-PT00:05:00\" - contains rows 10m 5m current row timestamp (inclusive), purely backwards looking window rev_time = \"-PT00:05:00\", fwd_time = \"PT00:10:00\" - contains rows 5m following 10m following current row timestamp (inclusive), purely forwards looking window function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_max_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling maximum with time as the windowing unit — uby_rolling_max_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling maximum of col1 and col2, using the previous 5 seconds th1 <- th$   update_by(uby_rolling_max_time(ts_col = \"timeCol\", cols = c(\"col1RollMax = col1\", \"col2RollMax = col2\"), rev_time = \"PT5s\"))  # compute rolling maximum of col1 and col2, grouped by boolCol, using previous 5 seconds, and following 5 seconds th2 <- th$   update_by(uby_rolling_max_time(ts_col = \"timeCol\", cols = c(\"col1RollMax = col1\", \"col2RollMax = col2\"), rev_time = \"PT5s\", fwd_ticks = \"PT5s\"), by = \"boolCol\")  # compute rolling maximum of col1 and col2, grouped by boolCol and parity of col3, using following 10 seconds th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_max_time(ts_col = \"timeCol\", cols = c(\"col1RollMax = col1\", \"col2RollMax = col2\"), rev_time = \"PT0s\", fwd_time = \"PT10s\"), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling minimum with ticks as the windowing unit — uby_rolling_min_tick","title":"Rolling minimum with ticks as the windowing unit — uby_rolling_min_tick","text":"Creates rolling minimum UpdateByOp column cols, using ticks windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling minimum with ticks as the windowing unit — uby_rolling_min_tick","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling minimum non-grouping columns. rev_ticks Integer scalar denoting look-behind window size number rows. fwd_ticks Integer scalar denoting look-ahead window size number rows. Default 0.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling minimum with ticks as the windowing unit — uby_rolling_min_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling minimum with ticks as the windowing unit — uby_rolling_min_tick","text":"Ticks row counts, may specify reverse forward window number rows include. current row considered belong reverse window forward window. Also, negative values allowed can used generate completely forward completely reverse windows. examples window values: rev_ticks = 1, fwd_ticks = 0 - contains current row rev_ticks = 10, fwd_ticks = 0 - contains 9 previous rows current row rev_ticks = 0, fwd_ticks = 10 - contains following 10 rows, excludes current row rev_ticks = 10, fwd_ticks = 10 - contains previous 9 rows, current row 10 rows following rev_ticks = 10, fwd_ticks = -5 - contains 5 rows, beginning 9 rows , ending 5 rows current row (inclusive) rev_ticks = 11, fwd_ticks = -1 - contains 10 rows, beginning 10 rows , ending 1 row current row (inclusive) rev_ticks = -5, fwd_ticks = 10 - contains 5 rows, beginning 5 rows following, ending 10 rows following current row (inclusive) function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling minimum with ticks as the windowing unit — uby_rolling_min_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling minimum of col1 and col2, using the previous 5 rows and current row th1 <- th$   update_by(uby_rolling_min_tick(cols = c(\"col1RollMin = col1\", \"col2RollMin = col2\"), rev_ticks = 6))  # compute rolling minimum of col1 and col2, grouped by boolCol, using previous 5 rows, current row, and following 5 rows th2 <- th$   update_by(uby_rolling_min_tick(cols = c(\"col1RollMin = col1\", \"col2RollMin = col2\"), rev_ticks = 6, fwd_ticks = 5), by = \"boolCol\")  # compute rolling minimum of col1 and col2, grouped by boolCol and parity of col3, using current row and following 10 rows th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_min_tick(cols = c(\"col1RollMin = col1\", \"col2RollMin = col2\"), rev_ticks = 1, fwd_ticks = 10), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling minimum with time as the windowing unit — uby_rolling_min_time","title":"Rolling minimum with time as the windowing unit — uby_rolling_min_time","text":"Creates rolling minimum UpdateByOp column cols, using time windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling minimum with time as the windowing unit — uby_rolling_min_time","text":"ts_col String denoting column use timestamp. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling minimum non-grouping columns. rev_time ISO-8601-formatted string specifying look-behind window size. fwd_time ISO-8601-formatted string specifying look-ahead window size. Default 0 seconds.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling minimum with time as the windowing unit — uby_rolling_min_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling minimum with time as the windowing unit — uby_rolling_min_time","text":"uses ISO-8601 time strings reverse forward window parameters. Negative values allowed can used generate completely forward completely reverse windows. row containing null value timestamp column belongs window considered windows rows; output null. examples window values: rev_time = \"PT00:10:00\", fwd_time = \"PT00:10:00\" - contains rows 10m 10m following current row timestamp (inclusive) rev_time = \"PT00:10:00\", fwd_time = \"-PT00:05:00\" - contains rows 10m 5m current row timestamp (inclusive), purely backwards looking window rev_time = \"-PT00:05:00\", fwd_time = \"PT00:10:00\" - contains rows 5m following 10m following current row timestamp (inclusive), purely forwards looking window function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_min_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling minimum with time as the windowing unit — uby_rolling_min_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling minimum of col1 and col2, using the previous 5 seconds th1 <- th$   update_by(uby_rolling_min_time(ts_col = \"timeCol\", cols = c(\"col1RollMin = col1\", \"col2RollMin = col2\"), rev_time = \"PT5s\"))  # compute rolling minimum of col1 and col2, grouped by boolCol, using previous 5 seconds, and following 5 seconds th2 <- th$   update_by(uby_rolling_min_time(ts_col = \"timeCol\", cols = c(\"col1RollMin = col1\", \"col2RollMin = col2\"), rev_time = \"PT5s\", fwd_ticks = \"PT5s\"), by = \"boolCol\")  # compute rolling minimum of col1 and col2, grouped by boolCol and parity of col3, using following 10 seconds th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_min_time(ts_col = \"timeCol\", cols = c(\"col1RollMin = col1\", \"col2RollMin = col2\"), rev_time = \"PT0s\", fwd_time = \"PT10s\"), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling product with ticks as the windowing unit — uby_rolling_prod_tick","title":"Rolling product with ticks as the windowing unit — uby_rolling_prod_tick","text":"Creates rolling product UpdateByOp column cols, using ticks windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling product with ticks as the windowing unit — uby_rolling_prod_tick","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling product non-grouping columns. rev_ticks Integer scalar denoting look-behind window size number rows. fwd_ticks Integer scalar denoting look-ahead window size number rows. Default 0.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling product with ticks as the windowing unit — uby_rolling_prod_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling product with ticks as the windowing unit — uby_rolling_prod_tick","text":"Ticks row counts, may specify reverse forward window number rows include. current row considered belong reverse window forward window. Also, negative values allowed can used generate completely forward completely reverse windows. examples window values: rev_ticks = 1, fwd_ticks = 0 - contains current row rev_ticks = 10, fwd_ticks = 0 - contains 9 previous rows current row rev_ticks = 0, fwd_ticks = 10 - contains following 10 rows, excludes current row rev_ticks = 10, fwd_ticks = 10 - contains previous 9 rows, current row 10 rows following rev_ticks = 10, fwd_ticks = -5 - contains 5 rows, beginning 9 rows , ending 5 rows current row (inclusive) rev_ticks = 11, fwd_ticks = -1 - contains 10 rows, beginning 10 rows , ending 1 row current row (inclusive) rev_ticks = -5, fwd_ticks = 10 - contains 5 rows, beginning 5 rows following, ending 10 rows following current row (inclusive) function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling product with ticks as the windowing unit — uby_rolling_prod_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling product of col1 and col2, using the previous 5 rows and current row th1 <- th$   update_by(uby_rolling_prod_tick(cols = c(\"col1RollProd = col1\", \"col2RollProd = col2\"), rev_ticks = 6))  # compute rolling product of col1 and col2, grouped by boolCol, using previous 5 rows, current row, and following 5 rows th2 <- th$   update_by(uby_rolling_prod_tick(cols = c(\"col1RollProd = col1\", \"col2RollProd = col2\"), rev_ticks = 6, fwd_ticks = 5), by = \"boolCol\")  # compute rolling product of col1 and col2, grouped by boolCol and parity of col3, using current row and following 10 rows th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_prod_tick(cols = c(\"col1RollProd = col1\", \"col2RollProd = col2\"), rev_ticks = 1, fwd_ticks = 10), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling product with time as the windowing unit — uby_rolling_prod_time","title":"Rolling product with time as the windowing unit — uby_rolling_prod_time","text":"Creates rolling product UpdateByOp column cols, using time windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling product with time as the windowing unit — uby_rolling_prod_time","text":"ts_col String denoting column use timestamp. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling product non-grouping columns. rev_time ISO-8601-formatted string specifying look-behind window size. fwd_time ISO-8601-formatted string specifying look-ahead window size. Default 0 seconds.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling product with time as the windowing unit — uby_rolling_prod_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling product with time as the windowing unit — uby_rolling_prod_time","text":"uses ISO-8601 time strings reverse forward window parameters. Negative values allowed can used generate completely forward completely reverse windows. row containing null value timestamp column belongs window considered windows rows; output null. examples window values: rev_time = \"PT00:10:00\", fwd_time = \"PT00:10:00\" - contains rows 10m 10m following current row timestamp (inclusive) rev_time = \"PT00:10:00\", fwd_time = \"-PT00:05:00\" - contains rows 10m 5m current row timestamp (inclusive), purely backwards looking window rev_time = \"-PT00:05:00\", fwd_time = \"PT00:10:00\" - contains rows 5m following 10m following current row timestamp (inclusive), purely forwards looking window function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_prod_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling product with time as the windowing unit — uby_rolling_prod_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling product of col1 and col2, using the previous 5 seconds th1 <- th$   update_by(uby_rolling_prod_time(ts_col = \"timeCol\", cols = c(\"col1RollProd = col1\", \"col2RollProd = col2\"), rev_time = \"PT5s\"))  # compute rolling product of col1 and col2, grouped by boolCol, using previous 5 seconds, and following 5 seconds th2 <- th$   update_by(uby_rolling_prod_time(ts_col = \"timeCol\", cols = c(\"col1RollProd = col1\", \"col2RollProd = col2\"), rev_time = \"PT5s\", fwd_ticks = \"PT5s\"), by = \"boolCol\")  # compute rolling product of col1 and col2, grouped by boolCol and parity of col3, using following 10 seconds th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_prod_time(ts_col = \"timeCol\", cols = c(\"col1RollProd = col1\", \"col2RollProd = col2\"), rev_time = \"PT0s\", fwd_time = \"PT10s\"), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling standard deviation with ticks as the windowing unit — uby_rolling_std_tick","title":"Rolling standard deviation with ticks as the windowing unit — uby_rolling_std_tick","text":"Creates rolling standard deviation UpdateByOp column cols, using ticks windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling standard deviation with ticks as the windowing unit — uby_rolling_std_tick","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling standard deviation non-grouping columns. rev_ticks Integer scalar denoting look-behind window size number rows. fwd_ticks Integer scalar denoting look-ahead window size number rows. Default 0.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling standard deviation with ticks as the windowing unit — uby_rolling_std_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling standard deviation with ticks as the windowing unit — uby_rolling_std_tick","text":"Ticks row counts, may specify reverse forward window number rows include. current row considered belong reverse window forward window. Also, negative values allowed can used generate completely forward completely reverse windows. examples window values: rev_ticks = 1, fwd_ticks = 0 - contains current row rev_ticks = 10, fwd_ticks = 0 - contains 9 previous rows current row rev_ticks = 0, fwd_ticks = 10 - contains following 10 rows, excludes current row rev_ticks = 10, fwd_ticks = 10 - contains previous 9 rows, current row 10 rows following rev_ticks = 10, fwd_ticks = -5 - contains 5 rows, beginning 9 rows , ending 5 rows current row (inclusive) rev_ticks = 11, fwd_ticks = -1 - contains 10 rows, beginning 10 rows , ending 1 row current row (inclusive) rev_ticks = -5, fwd_ticks = 10 - contains 5 rows, beginning 5 rows following, ending 10 rows following current row (inclusive) function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling standard deviation with ticks as the windowing unit — uby_rolling_std_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling standard deviation of col1 and col2, using the previous 5 rows and current row th1 <- th$   update_by(uby_rolling_std_tick(cols = c(\"col1RollStd = col1\", \"col2RollStd = col2\"), rev_ticks = 6))  # compute rolling standard deviation of col1 and col2, grouped by boolCol, using previous 5 rows, current row, and following 5 rows th2 <- th$   update_by(uby_rolling_std_tick(cols = c(\"col1RollStd = col1\", \"col2RollStd = col2\"), rev_ticks = 6, fwd_ticks = 5), by = \"boolCol\")  # compute rolling standard deviation of col1 and col2, grouped by boolCol and parity of col3, using current row and following 10 rows th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_std_tick(cols = c(\"col1RollStd = col1\", \"col2RollStd = col2\"), rev_ticks = 1, fwd_ticks = 10), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling standard deviation with time as the windowing unit — uby_rolling_std_time","title":"Rolling standard deviation with time as the windowing unit — uby_rolling_std_time","text":"Creates rolling standard deviation UpdateByOp column cols, using time windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling standard deviation with time as the windowing unit — uby_rolling_std_time","text":"ts_col String denoting column use timestamp. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling standard deviation non-grouping columns. rev_time ISO-8601-formatted string specifying look-behind window size. fwd_time ISO-8601-formatted string specifying look-ahead window size. Default 0 seconds.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling standard deviation with time as the windowing unit — uby_rolling_std_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling standard deviation with time as the windowing unit — uby_rolling_std_time","text":"uses ISO-8601 time strings reverse forward window parameters. Negative values allowed can used generate completely forward completely reverse windows. row containing null value timestamp column belongs window considered windows rows; output null. examples window values: rev_time = \"PT00:10:00\", fwd_time = \"PT00:10:00\" - contains rows 10m 10m following current row timestamp (inclusive) rev_time = \"PT00:10:00\", fwd_time = \"-PT00:05:00\" - contains rows 10m 5m current row timestamp (inclusive), purely backwards looking window rev_time = \"-PT00:05:00\", fwd_time = \"PT00:10:00\" - contains rows 5m following 10m following current row timestamp (inclusive), purely forwards looking window function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_std_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling standard deviation with time as the windowing unit — uby_rolling_std_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling standard deviation of col1 and col2, using the previous 5 seconds th1 <- th$   update_by(uby_rolling_std_time(ts_col = \"timeCol\", cols = c(\"col1RollStd = col1\", \"col2RollStd = col2\"), rev_time = \"PT5s\"))  # compute rolling standard deviation of col1 and col2, grouped by boolCol, using previous 5 seconds, and following 5 seconds th2 <- th$   update_by(uby_rolling_std_time(ts_col = \"timeCol\", cols = c(\"col1RollStd = col1\", \"col2RollStd = col2\"), rev_time = \"PT5s\", fwd_ticks = \"PT5s\"), by = \"boolCol\")  # compute rolling standard deviation of col1 and col2, grouped by boolCol and parity of col3, using following 10 seconds th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_std_time(ts_col = \"timeCol\", cols = c(\"col1RollStd = col1\", \"col2RollStd = col2\"), rev_time = \"PT0s\", fwd_time = \"PT10s\"), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling sum by group with ticks as the windowing unit — uby_rolling_sum_tick","title":"Rolling sum by group with ticks as the windowing unit — uby_rolling_sum_tick","text":"Creates rolling sum UpdateByOp column cols, using ticks windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling sum by group with ticks as the windowing unit — uby_rolling_sum_tick","text":"cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling sum non-grouping columns. rev_ticks Integer scalar denoting look-behind window size number rows. fwd_ticks Integer scalar denoting look-ahead window size number rows. Default 0.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling sum by group with ticks as the windowing unit — uby_rolling_sum_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling sum by group with ticks as the windowing unit — uby_rolling_sum_tick","text":"Ticks row counts, may specify reverse forward window number rows include. current row considered belong reverse window forward window. Also, negative values allowed can used generate completely forward completely reverse windows. examples window values: rev_ticks = 1, fwd_ticks = 0 - contains current row rev_ticks = 10, fwd_ticks = 0 - contains 9 previous rows current row rev_ticks = 0, fwd_ticks = 10 - contains following 10 rows, excludes current row rev_ticks = 10, fwd_ticks = 10 - contains previous 9 rows, current row 10 rows following rev_ticks = 10, fwd_ticks = -5 - contains 5 rows, beginning 9 rows , ending 5 rows current row (inclusive) rev_ticks = 11, fwd_ticks = -1 - contains 10 rows, beginning 10 rows , ending 1 row current row (inclusive) rev_ticks = -5, fwd_ticks = 10 - contains 5 rows, beginning 5 rows following, ending 10 rows following current row (inclusive) function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling sum by group with ticks as the windowing unit — uby_rolling_sum_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling sum of col1 and col2, using the previous 5 rows and current row th1 <- th$   update_by(uby_rolling_sum_tick(cols = c(\"col1RollSum = col1\", \"col2RollSum = col2\"), rev_ticks = 6))  # compute rolling sum of col1 and col2, grouped by boolCol, using previous 5 rows, current row, and following 5 rows th2 <- th$   update_by(uby_rolling_sum_tick(cols = c(\"col1RollSum = col1\", \"col2RollSum = col2\"), rev_ticks = 6, fwd_ticks = 5), by = \"boolCol\")  # compute rolling sum of col1 and col2, grouped by boolCol and parity of col3, using current row and following 10 rows th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_sum_tick(cols = c(\"col1RollSum = col1\", \"col2RollSum = col2\"), rev_ticks = 1, fwd_ticks = 10), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling sum by group with time as the windowing unit — uby_rolling_sum_time","title":"Rolling sum by group with time as the windowing unit — uby_rolling_sum_time","text":"Creates rolling sum UpdateByOp column cols, using time windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling sum by group with time as the windowing unit — uby_rolling_sum_time","text":"ts_col String denoting column use timestamp. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling sum non-grouping columns. rev_time ISO-8601-formatted string specifying look-behind window size. fwd_time ISO-8601-formatted string specifying look-ahead window size. Default 0 seconds.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling sum by group with time as the windowing unit — uby_rolling_sum_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling sum by group with time as the windowing unit — uby_rolling_sum_time","text":"uses ISO-8601 time strings reverse forward window parameters. Negative values allowed can used generate completely forward completely reverse windows. row containing null value timestamp column belongs window considered windows rows; output null. examples window values: rev_time = \"PT00:10:00\", fwd_time = \"PT00:10:00\" - contains rows 10m 10m following current row timestamp (inclusive) rev_time = \"PT00:10:00\", fwd_time = \"-PT00:05:00\" - contains rows 10m 5m current row timestamp (inclusive), purely backwards looking window rev_time = \"-PT00:05:00\", fwd_time = \"PT00:10:00\" - contains rows 5m following 10m following current row timestamp (inclusive), purely forwards looking window function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_sum_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling sum by group with time as the windowing unit — uby_rolling_sum_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling sum of col1 and col2, using the previous 5 seconds th1 <- th$   update_by(uby_rolling_sum_time(ts_col = \"timeCol\", cols = c(\"col1RollSum = col1\", \"col2RollSum = col2\"), rev_time = \"PT5s\"))  # compute rolling sum of col1 and col2, grouped by boolCol, using previous 5 seconds, and following 5 seconds th2 <- th$   update_by(uby_rolling_sum_time(ts_col = \"timeCol\", cols = c(\"col1RollSum = col1\", \"col2RollSum = col2\"), rev_time = \"PT5s\", fwd_ticks = \"PT5s\"), by = \"boolCol\")  # compute rolling sum of col1 and col2, grouped by boolCol and parity of col3, using following 10 seconds th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_sum_time(ts_col = \"timeCol\", cols = c(\"col1RollSum = col1\", \"col2RollSum = col2\"), rev_time = \"PT0s\", fwd_time = \"PT10s\"), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_tick.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling weighted average with ticks as the windowing unit — uby_rolling_wavg_tick","title":"Rolling weighted average with ticks as the windowing unit — uby_rolling_wavg_tick","text":"Creates rolling weighted average UpdateByOp column cols, using ticks windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_tick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling weighted average with ticks as the windowing unit — uby_rolling_wavg_tick","text":"wcol String denoting column use weights. must numeric column. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling weighted average non-grouping columns. rev_ticks Integer scalar denoting look-behind window size number rows. fwd_ticks Integer scalar denoting look-ahead window size number rows. Default 0.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_tick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling weighted average with ticks as the windowing unit — uby_rolling_wavg_tick","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_tick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling weighted average with ticks as the windowing unit — uby_rolling_wavg_tick","text":"Ticks row counts, may specify reverse forward window number rows include. current row considered belong reverse window forward window. Also, negative values allowed can used generate completely forward completely reverse windows. examples window values: rev_ticks = 1, fwd_ticks = 0 - contains current row rev_ticks = 10, fwd_ticks = 0 - contains 9 previous rows current row rev_ticks = 0, fwd_ticks = 10 - contains following 10 rows, excludes current row rev_ticks = 10, fwd_ticks = 10 - contains previous 9 rows, current row 10 rows following rev_ticks = 10, fwd_ticks = -5 - contains 5 rows, beginning 9 rows , ending 5 rows current row (inclusive) rev_ticks = 11, fwd_ticks = -1 - contains 10 rows, beginning 10 rows , ending 1 row current row (inclusive) rev_ticks = -5, fwd_ticks = 10 - contains 5 rows, beginning 5 rows following, ending 10 rows following current row (inclusive) function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_tick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling weighted average with ticks as the windowing unit — uby_rolling_wavg_tick","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling weighted average of col1 and col2, weighted by col3, using the previous 5 rows and current row th1 <- th$   update_by(uby_rolling_wavg_tick(wcol = \"col3\", cols = c(\"col1RollWAvg = col1\", \"col2RollWAvg = col2\"), rev_ticks = 6))  # compute rolling weighted average of col1 and col2, weighted by col3, grouped by boolCol, using previous 5 rows, current row, and following 5 rows th2 <- th$   update_by(uby_rolling_wavg_tick(wcol = \"col3\", cols = c(\"col1RollWAvg = col1\", \"col2RollWAvg = col2\"), rev_ticks = 6, fwd_ticks = 5), by = \"boolCol\")  # compute rolling weighted average of col1 and col2, weighted by col3, grouped by boolCol and parity of col3, using current row and following 10 rows th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_wavg_tick(wcol = \"col3\", cols = c(\"col1RollWAvg = col1\", \"col2RollWAvg = col2\"), rev_ticks = 1, fwd_ticks = 10), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Rolling weighted average with time as the windowing unit — uby_rolling_wavg_time","title":"Rolling weighted average with time as the windowing unit — uby_rolling_wavg_time","text":"Creates rolling weighted average UpdateByOp column cols, using time windowing unit.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rolling weighted average with time as the windowing unit — uby_rolling_wavg_time","text":"ts_col String denoting column use timestamp. wcol String denoting column use weights. must numeric column. cols String list strings denoting column(s) operate . Can renaming expressions, .e. “new_col = col”. Default compute rolling weighted average non-grouping columns. rev_time ISO-8601-formatted string specifying look-behind window size. fwd_time ISO-8601-formatted string specifying look-ahead window size. Default 0 seconds.","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rolling weighted average with time as the windowing unit — uby_rolling_wavg_time","text":"UpdateByOp used call update_by().","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rolling weighted average with time as the windowing unit — uby_rolling_wavg_time","text":"uses ISO-8601 time strings reverse forward window parameters. Negative values allowed can used generate completely forward completely reverse windows. row containing null value timestamp column belongs window considered windows rows; output null. examples window values: rev_time = \"PT00:10:00\", fwd_time = \"PT00:10:00\" - contains rows 10m 10m following current row timestamp (inclusive) rev_time = \"PT00:10:00\", fwd_time = \"-PT00:05:00\" - contains rows 10m 5m current row timestamp (inclusive), purely backwards looking window rev_time = \"-PT00:05:00\", fwd_time = \"PT00:10:00\" - contains rows 5m following 10m following current row timestamp (inclusive), purely forwards looking window function acts aggregation groups specified parameter update_by() caller function. aggregation groups defined unique combinations values columns. example, = c(\"\", \"B\"), aggregation groups defined unique combinations values B columns. function, like Deephaven uby functions, generator function. , output another function called UpdateByOp intended used call update_by(). detail typically hidden user. However, important understand detail debugging purposes, output uby function can otherwise seem unexpected. information, see vignette uby functions running vignette(\"update_by\").","code":""},{"path":"https://deephaven.io/core/rdoc/reference/uby_rolling_wavg_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rolling weighted average with time as the windowing unit — uby_rolling_wavg_time","text":"","code":"if (FALSE) { library(rdeephaven)  # connecting to Deephaven server client <- Client$new(\"localhost:10000\", auth_type = \"psk\", auth_token = \"my_secret_token\")  # create data frame, push to server, retrieve TableHandle df <- data.frame(   timeCol = seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date() + 0.01), by = \"1 sec\")[1:500],   boolCol = sample(c(TRUE, FALSE), 500, TRUE),   col1 = sample(10000, size = 500, replace = TRUE),   col2 = sample(10000, size = 500, replace = TRUE),   col3 = 1:500 ) th <- client$import_table(df)  # compute rolling weighted average of col1 and col2, weighted by col3, using the previous 5 seconds th1 <- th$   update_by(uby_rolling_wavg_time(ts_col = \"timeCol\", wcol = \"col3\", cols = c(\"col1RollWAvg = col1\", \"col2RollWAvg = col2\"), rev_time = \"PT5s\"))  # compute rolling weighted average of col1 and col2, weighted by col3, grouped by boolCol, using previous 5 seconds, and following 5 seconds th2 <- th$   update_by(uby_rolling_wavg_time(ts_col = \"timeCol\", wcol = \"col3\", cols = c(\"col1RollWAvg = col1\", \"col2RollWAvg = col2\"), rev_time = \"PT5s\", fwd_ticks = \"PT5s\"), by = \"boolCol\")  # compute rolling weighted average of col1 and col2, weighted by col3, grouped by boolCol and parity of col3, using following 10 seconds th3 <- th$   update(\"col3Parity = col3 % 2\")$   update_by(uby_rolling_wavg_time(ts_col = \"timeCol\", wcol = \"col3\", cols = c(\"col1RollWAvg = col1\", \"col2RollWAvg = col2\"), rev_time = \"PT0s\", fwd_time = \"PT10s\"), by = c(\"boolCol\", \"col3Parity\"))  client$close() }"}]
