% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/client_wrapper.R
\docType{class}
\name{Client-class}
\alias{Client-class}
\title{The Deephaven Client}
\description{
The Deephaven Client class is responsible for establishing and maintaining
a connection to a running Deephaven server and facilitating basic server requests.
}
\section{Establishing a server connection with \code{dhConnect}}{

Connections to a Deephaven server are established with a call to \code{dhConnect},
which returns a \code{Client} object responsible for maintaining the connection and
providing an interface to basic server requests. Deephaven servers can be created
with many different configurations, so \code{dhConnect} has the following list of
arguments to support connections to servers with any configuration.
\itemize{
\item \code{target}: A string denoting the URL hosting the server.
\item \code{auth_type}: A string denoting the authentication type, can be \code{anonymous},
\code{basic}, or any custom-built authenticator in the server, such as
\code{io.deephaven.authentication.psk.PskAuthenticationHandler}. Defaults to \code{anonymous}.
\item \code{auth_token}: A string denoting the authentication token. When \code{auth_type}
is \code{anonymous}, it will be ignored; when \code{auth_type} is \code{basic}, it must be
\code{"user:password"}; when \code{auth_type} is a custom-built authenticator, it must
conform to the specific requirement of that authenticator.
\item \code{session_type}: A string denoting the session type supported on the server.
Currently, \code{python} and \code{groovy} are supported. Defaults to \code{python}.
\item \code{use_tls}: Whether or not to use a TLS connection.  Defaults to \code{FALSE}.
\item \code{tls_root_certs}: PEM encoded root certificates to use for TLS connection,
or \code{""} to use system defaults. Only used if \code{use_tls == TRUE}. Defaults to system defaults.
\item \code{int_options}: List of name-value pairs for int-valued options to the underlying
grpc channel creation.  Defaults to an empty list, which implies not using any channel options.
\item \code{string_options}: List of name-value pairs for string-valued options to the underlying
grpc channel creation.  Defaults to an empty list, which implies not using any channel options.
\item \code{extra_headers}: List of name-value pairs for additional headers and values
to add to server requests. Defaults to an empty list, which implies not using any extra headers.
}
}

\section{Methods}{


Once a server connection is established, the \code{Client} supports the following
list of methods for facilitating server requests.
\itemize{
\item \code{open_table(client, name)}:
\item \code{empty_table(client, size)}:
\item \code{time_table(client, period, start_time)}:
\item \code{as_dh_table(client, table_object)}:
\item \code{run_script(client, script)}:
\item \code{close(client)}:
}
}

\examples{
my_array <- Array$create(1:10)
my_array$type
my_array$cast(int8())

# Check if value is null; zero-indexed
na_array <- Array$create(c(1:5, NA))
na_array$IsNull(0)
na_array$IsNull(5)
na_array$IsValid(5)
na_array$null_count

# zero-copy slicing; the offset of the new Array will be the same as the index passed to $Slice
new_array <- na_array$Slice(5)
new_array$offset

# Compare 2 arrays
na_array2 <- na_array
na_array2 == na_array # element-wise comparison
na_array2$Equals(na_array) # overall comparison
}
